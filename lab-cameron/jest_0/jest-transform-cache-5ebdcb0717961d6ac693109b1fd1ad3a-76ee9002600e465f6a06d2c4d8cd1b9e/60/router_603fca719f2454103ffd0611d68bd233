00bfc52386ec7a2c9a239232bbe919fb
'use strict'; /* istanbul ignore next */var cov_26v2gg264c = function () {var path = '/home/cameron/Programming/CodeFellows/401/labs/08-09-vanilla-rest-server/lab-cameron/lib/router.js',hash = '51eaffdd0d4c591dc44ca4abecb9bbf724461d09',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/home/cameron/Programming/CodeFellows/401/labs/08-09-vanilla-rest-server/lab-cameron/lib/router.js', statementMap: { '0': { start: { line: 3, column: 22 }, end: { line: 3, column: 49 } }, '1': { start: { line: 4, column: 15 }, end: { line: 4, column: 34 } }, '2': { start: { line: 6, column: 22 }, end: { line: 11, column: 1 } }, '3': { start: { line: 14, column: 15 }, end: { line: 14, column: 34 } }, '4': { start: { line: 16, column: 26 }, end: { line: 20, column: 1 } }, '5': { start: { line: 17, column: 2 }, end: { line: 17, column: 63 } }, '6': { start: { line: 18, column: 2 }, end: { line: 18, column: 25 } }, '7': { start: { line: 19, column: 2 }, end: { line: 19, column: 41 } }, '8': { start: { line: 22, column: 0 }, end: { line: 25, column: 2 } }, '9': { start: { line: 23, column: 2 }, end: { line: 23, column: 42 } }, '10': { start: { line: 24, column: 2 }, end: { line: 24, column: 36 } }, '11': { start: { line: 27, column: 0 }, end: { line: 30, column: 2 } }, '12': { start: { line: 28, column: 2 }, end: { line: 28, column: 43 } }, '13': { start: { line: 29, column: 2 }, end: { line: 29, column: 37 } }, '14': { start: { line: 32, column: 0 }, end: { line: 35, column: 2 } }, '15': { start: { line: 33, column: 2 }, end: { line: 33, column: 42 } }, '16': { start: { line: 34, column: 2 }, end: { line: 34, column: 36 } }, '17': { start: { line: 37, column: 0 }, end: { line: 40, column: 2 } }, '18': { start: { line: 38, column: 2 }, end: { line: 38, column: 45 } }, '19': { start: { line: 39, column: 2 }, end: { line: 39, column: 39 } }, '20': { start: { line: 42, column: 0 }, end: { line: 78, column: 2 } }, '21': { start: { line: 43, column: 2 }, end: { line: 43, column: 42 } }, '22': { start: { line: 45, column: 2 }, end: { line: 77, column: 7 } }, '23': { start: { line: 47, column: 25 }, end: { line: 47, column: 76 } }, '24': { start: { line: 48, column: 6 }, end: { line: 48, column: 56 } }, '25': { start: { line: 49, column: 6 }, end: { line: 49, column: 50 } }, '26': { start: { line: 50, column: 6 }, end: { line: 56, column: 7 } }, '27': { start: { line: 51, column: 8 }, end: { line: 51, column: 47 } }, '28': { start: { line: 53, column: 8 }, end: { line: 53, column: 32 } }, '29': { start: { line: 54, column: 8 }, end: { line: 54, column: 23 } }, '30': { start: { line: 55, column: 8 }, end: { line: 55, column: 15 } }, '31': { start: { line: 59, column: 6 }, end: { line: 59, column: 46 } }, '32': { start: { line: 60, column: 6 }, end: { line: 60, column: 32 } }, '33': { start: { line: 62, column: 6 }, end: { line: 66, column: 7 } }, '34': { start: { line: 63, column: 8 }, end: { line: 63, column: 72 } }, '35': { start: { line: 64, column: 8 }, end: { line: 64, column: 23 } }, '36': { start: { line: 65, column: 8 }, end: { line: 65, column: 15 } }, '37': { start: { line: 67, column: 6 }, end: { line: 71, column: 7 } }, '38': { start: { line: 68, column: 8 }, end: { line: 68, column: 72 } }, '39': { start: { line: 69, column: 8 }, end: { line: 69, column: 23 } }, '40': { start: { line: 70, column: 8 }, end: { line: 70, column: 15 } }, '41': { start: { line: 72, column: 6 }, end: { line: 76, column: 7 } }, '42': { start: { line: 73, column: 8 }, end: { line: 73, column: 72 } }, '43': { start: { line: 74, column: 8 }, end: { line: 74, column: 23 } }, '44': { start: { line: 75, column: 8 }, end: { line: 75, column: 15 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 16, column: 26 }, end: { line: 16, column: 27 } }, loc: { start: { line: 16, column: 57 }, end: { line: 20, column: 1 } }, line: 16 }, '1': { name: '(anonymous_1)', decl: { start: { line: 22, column: 13 }, end: { line: 22, column: 14 } }, loc: { start: { line: 22, column: 32 }, end: { line: 25, column: 1 } }, line: 22 }, '2': { name: '(anonymous_2)', decl: { start: { line: 27, column: 14 }, end: { line: 27, column: 15 } }, loc: { start: { line: 27, column: 33 }, end: { line: 30, column: 1 } }, line: 27 }, '3': { name: '(anonymous_3)', decl: { start: { line: 32, column: 13 }, end: { line: 32, column: 14 } }, loc: { start: { line: 32, column: 32 }, end: { line: 35, column: 1 } }, line: 32 }, '4': { name: '(anonymous_4)', decl: { start: { line: 37, column: 16 }, end: { line: 37, column: 17 } }, loc: { start: { line: 37, column: 35 }, end: { line: 40, column: 1 } }, line: 37 }, '5': { name: '(anonymous_5)', decl: { start: { line: 42, column: 15 }, end: { line: 42, column: 16 } }, loc: { start: { line: 42, column: 38 }, end: { line: 78, column: 1 } }, line: 42 }, '6': { name: '(anonymous_6)', decl: { start: { line: 46, column: 10 }, end: { line: 46, column: 11 } }, loc: { start: { line: 46, column: 21 }, end: { line: 57, column: 5 } }, line: 46 }, '7': { name: '(anonymous_7)', decl: { start: { line: 58, column: 11 }, end: { line: 58, column: 12 } }, loc: { start: { line: 58, column: 20 }, end: { line: 77, column: 5 } }, line: 58 } }, branchMap: { '0': { loc: { start: { line: 50, column: 6 }, end: { line: 56, column: 7 } }, type: 'if', locations: [{ start: { line: 50, column: 6 }, end: { line: 56, column: 7 } }, { start: { line: 50, column: 6 }, end: { line: 56, column: 7 } }], line: 50 }, '1': { loc: { start: { line: 62, column: 6 }, end: { line: 66, column: 7 } }, type: 'if', locations: [{ start: { line: 62, column: 6 }, end: { line: 66, column: 7 } }, { start: { line: 62, column: 6 }, end: { line: 66, column: 7 } }], line: 62 }, '2': { loc: { start: { line: 67, column: 6 }, end: { line: 71, column: 7 } }, type: 'if', locations: [{ start: { line: 67, column: 6 }, end: { line: 71, column: 7 } }, { start: { line: 67, column: 6 }, end: { line: 71, column: 7 } }], line: 67 }, '3': { loc: { start: { line: 72, column: 6 }, end: { line: 76, column: 7 } }, type: 'if', locations: [{ start: { line: 72, column: 6 }, end: { line: 76, column: 7 } }, { start: { line: 72, column: 6 }, end: { line: 76, column: 7 } }], line: 72 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0, '35': 0, '36': 0, '37': 0, '38': 0, '39': 0, '40': 0, '41': 0, '42': 0, '43': 0, '44': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();

const requestParser = /* istanbul ignore next */(cov_26v2gg264c.s[0]++, require('./request-parser'));
const logger = /* istanbul ignore next */(cov_26v2gg264c.s[1]++, require('./logger'));

const routeHandlers = /* istanbul ignore next */(cov_26v2gg264c.s[2]++, {
  POST: {},
  GET: {},
  DELETE: {},
  PUT: {} });



const router = /* istanbul ignore next */(cov_26v2gg264c.s[3]++, module.exports = {}); /* istanbul ignore next */cov_26v2gg264c.s[4]++;

const logUrlAndCallback = (httpMethod, url, callback) => {/* istanbul ignore next */cov_26v2gg264c.f[0]++;cov_26v2gg264c.s[5]++;
  logger.log('info', `Adding a ${httpMethod} url and callback`); /* istanbul ignore next */cov_26v2gg264c.s[6]++;
  logger.log('info', url); /* istanbul ignore next */cov_26v2gg264c.s[7]++;
  logger.log('info', callback.toString());
}; /* istanbul ignore next */cov_26v2gg264c.s[8]++;

router.get = (url, callback) => {/* istanbul ignore next */cov_26v2gg264c.f[1]++;cov_26v2gg264c.s[9]++;
  logUrlAndCallback('GET', url, callback); /* istanbul ignore next */cov_26v2gg264c.s[10]++;
  routeHandlers.GET[url] = callback;
}; /* istanbul ignore next */cov_26v2gg264c.s[11]++;

router.post = (url, callback) => {/* istanbul ignore next */cov_26v2gg264c.f[2]++;cov_26v2gg264c.s[12]++;
  logUrlAndCallback('POST', url, callback); /* istanbul ignore next */cov_26v2gg264c.s[13]++;
  routeHandlers.POST[url] = callback;
}; /* istanbul ignore next */cov_26v2gg264c.s[14]++;

router.put = (url, callback) => {/* istanbul ignore next */cov_26v2gg264c.f[3]++;cov_26v2gg264c.s[15]++;
  logUrlAndCallback('PUT', url, callback); /* istanbul ignore next */cov_26v2gg264c.s[16]++;
  routeHandlers.PUT[url] = callback;
}; /* istanbul ignore next */cov_26v2gg264c.s[17]++;

router.delete = (url, callback) => {/* istanbul ignore next */cov_26v2gg264c.f[4]++;cov_26v2gg264c.s[18]++;
  logUrlAndCallback('DELETE', url, callback); /* istanbul ignore next */cov_26v2gg264c.s[19]++;
  routeHandlers.DELETE[url] = callback;
}; /* istanbul ignore next */cov_26v2gg264c.s[20]++;

router.route = (request, response) => {/* istanbul ignore next */cov_26v2gg264c.f[5]++;cov_26v2gg264c.s[21]++;
  logger.log('info', 'Routing a Request'); /* istanbul ignore next */cov_26v2gg264c.s[22]++;

  requestParser.parse(request).
  then(request => {/* istanbul ignore next */cov_26v2gg264c.f[6]++;
    let handlerFound = /* istanbul ignore next */(cov_26v2gg264c.s[23]++, routeHandlers[request.method][request.url.pathname]); /* istanbul ignore next */cov_26v2gg264c.s[24]++;
    logger.log('info', 'Found the following handler'); /* istanbul ignore next */cov_26v2gg264c.s[25]++;
    logger.log('info', handlerFound.toString()); /* istanbul ignore next */cov_26v2gg264c.s[26]++;
    if (handlerFound) {/* istanbul ignore next */cov_26v2gg264c.b[0][0]++;cov_26v2gg264c.s[27]++;
      return handlerFound(request, response);
    } else {/* istanbul ignore next */cov_26v2gg264c.b[0][1]++;cov_26v2gg264c.s[28]++;
      response.writeHead(404); /* istanbul ignore next */cov_26v2gg264c.s[29]++;
      response.end(); /* istanbul ignore next */cov_26v2gg264c.s[30]++;
      return;
    }
  }).
  catch(error => {/* istanbul ignore next */cov_26v2gg264c.f[7]++;cov_26v2gg264c.s[31]++;
    logger.log('info', '__REQUEST_ERROR__'); /* istanbul ignore next */cov_26v2gg264c.s[32]++;
    logger.log('info', error); /* istanbul ignore next */cov_26v2gg264c.s[33]++;

    if (request.method === 'GET') {/* istanbul ignore next */cov_26v2gg264c.b[1][0]++;cov_26v2gg264c.s[34]++;
      response.writeHead(404, { 'Content-Type': 'application/json' }); /* istanbul ignore next */cov_26v2gg264c.s[35]++;
      response.end(); /* istanbul ignore next */cov_26v2gg264c.s[36]++;
      return;
    } else /* istanbul ignore next */{cov_26v2gg264c.b[1][1]++;}cov_26v2gg264c.s[37]++;
    if (request.method === 'POST') {/* istanbul ignore next */cov_26v2gg264c.b[2][0]++;cov_26v2gg264c.s[38]++;
      response.writeHead(400, { 'Content-Type': 'application/json' }); /* istanbul ignore next */cov_26v2gg264c.s[39]++;
      response.end(); /* istanbul ignore next */cov_26v2gg264c.s[40]++;
      return;
    } else /* istanbul ignore next */{cov_26v2gg264c.b[2][1]++;}cov_26v2gg264c.s[41]++;
    if (request.method === 'DELETE') {/* istanbul ignore next */cov_26v2gg264c.b[3][0]++;cov_26v2gg264c.s[42]++;
      response.writeHead(404, { 'Content-Type': 'application.json' }); /* istanbul ignore next */cov_26v2gg264c.s[43]++;
      response.end(); /* istanbul ignore next */cov_26v2gg264c.s[44]++;
      return;
    } else /* istanbul ignore next */{cov_26v2gg264c.b[3][1]++;}
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0UGFyc2VyIiwicmVxdWlyZSIsImxvZ2dlciIsInJvdXRlSGFuZGxlcnMiLCJQT1NUIiwiR0VUIiwiREVMRVRFIiwiUFVUIiwicm91dGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImxvZ1VybEFuZENhbGxiYWNrIiwiaHR0cE1ldGhvZCIsInVybCIsImNhbGxiYWNrIiwibG9nIiwidG9TdHJpbmciLCJnZXQiLCJwb3N0IiwicHV0IiwiZGVsZXRlIiwicm91dGUiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJwYXJzZSIsInRoZW4iLCJoYW5kbGVyRm91bmQiLCJtZXRob2QiLCJwYXRobmFtZSIsIndyaXRlSGVhZCIsImVuZCIsImNhdGNoIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLGE7O0FBRUEsTUFBTUEsa0VBQWdCQyxRQUFRLGtCQUFSLENBQWhCLENBQU47QUFDQSxNQUFNQywyREFBU0QsUUFBUSxVQUFSLENBQVQsQ0FBTjs7QUFFQSxNQUFNRSxrRUFBZ0I7QUFDcEJDLFFBQU0sRUFEYztBQUVwQkMsT0FBSyxFQUZlO0FBR3BCQyxVQUFRLEVBSFk7QUFJcEJDLE9BQUssRUFKZSxFQUFoQixDQUFOOzs7O0FBUUEsTUFBTUMsMkRBQVNDLE9BQU9DLE9BQVAsR0FBaUIsRUFBMUIsQ0FBTixDOztBQUVBLE1BQU1DLG9CQUFvQixDQUFDQyxVQUFELEVBQWFDLEdBQWIsRUFBa0JDLFFBQWxCLEtBQStCO0FBQ3ZEWixTQUFPYSxHQUFQLENBQVcsTUFBWCxFQUFtQixZQUFXSCxVQUFXLG1CQUF6QyxFQUR1RDtBQUV2RFYsU0FBT2EsR0FBUCxDQUFXLE1BQVgsRUFBa0JGLEdBQWxCLEVBRnVEO0FBR3ZEWCxTQUFPYSxHQUFQLENBQVcsTUFBWCxFQUFrQkQsU0FBU0UsUUFBVCxFQUFsQjtBQUNELENBSkQsQzs7QUFNQVIsT0FBT1MsR0FBUCxHQUFhLENBQUNKLEdBQUQsRUFBTUMsUUFBTixLQUFtQjtBQUM5Qkgsb0JBQWtCLEtBQWxCLEVBQXlCRSxHQUF6QixFQUE4QkMsUUFBOUIsRUFEOEI7QUFFOUJYLGdCQUFjRSxHQUFkLENBQWtCUSxHQUFsQixJQUF5QkMsUUFBekI7QUFDRCxDQUhELEM7O0FBS0FOLE9BQU9VLElBQVAsR0FBYyxDQUFDTCxHQUFELEVBQU1DLFFBQU4sS0FBbUI7QUFDL0JILG9CQUFrQixNQUFsQixFQUEwQkUsR0FBMUIsRUFBK0JDLFFBQS9CLEVBRCtCO0FBRS9CWCxnQkFBY0MsSUFBZCxDQUFtQlMsR0FBbkIsSUFBMEJDLFFBQTFCO0FBQ0QsQ0FIRCxDOztBQUtBTixPQUFPVyxHQUFQLEdBQWEsQ0FBQ04sR0FBRCxFQUFNQyxRQUFOLEtBQW1CO0FBQzlCSCxvQkFBa0IsS0FBbEIsRUFBeUJFLEdBQXpCLEVBQThCQyxRQUE5QixFQUQ4QjtBQUU5QlgsZ0JBQWNJLEdBQWQsQ0FBa0JNLEdBQWxCLElBQXlCQyxRQUF6QjtBQUNELENBSEQsQzs7QUFLQU4sT0FBT1ksTUFBUCxHQUFnQixDQUFDUCxHQUFELEVBQU1DLFFBQU4sS0FBbUI7QUFDakNILG9CQUFrQixRQUFsQixFQUE0QkUsR0FBNUIsRUFBaUNDLFFBQWpDLEVBRGlDO0FBRWpDWCxnQkFBY0csTUFBZCxDQUFxQk8sR0FBckIsSUFBNEJDLFFBQTVCO0FBQ0QsQ0FIRCxDOztBQUtBTixPQUFPYSxLQUFQLEdBQWUsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEtBQXVCO0FBQ3BDckIsU0FBT2EsR0FBUCxDQUFXLE1BQVgsRUFBbUIsbUJBQW5CLEVBRG9DOztBQUdwQ2YsZ0JBQWN3QixLQUFkLENBQW9CRixPQUFwQjtBQUNHRyxNQURILENBQ1FILFdBQVc7QUFDZixRQUFJSSxrRUFBZXZCLGNBQWNtQixRQUFRSyxNQUF0QixFQUE4QkwsUUFBUVQsR0FBUixDQUFZZSxRQUExQyxDQUFmLENBQUosQ0FEZTtBQUVmMUIsV0FBT2EsR0FBUCxDQUFXLE1BQVgsRUFBbUIsNkJBQW5CLEVBRmU7QUFHZmIsV0FBT2EsR0FBUCxDQUFXLE1BQVgsRUFBbUJXLGFBQWFWLFFBQWIsRUFBbkIsRUFIZTtBQUlmLFFBQUlVLFlBQUosRUFBa0I7QUFDaEIsYUFBT0EsYUFBYUosT0FBYixFQUFzQkMsUUFBdEIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMQSxlQUFTTSxTQUFULENBQW1CLEdBQW5CLEVBREs7QUFFTE4sZUFBU08sR0FBVCxHQUZLO0FBR0w7QUFDRDtBQUNGLEdBWkg7QUFhR0MsT0FiSCxDQWFTQyxTQUFTO0FBQ2Q5QixXQUFPYSxHQUFQLENBQVcsTUFBWCxFQUFtQixtQkFBbkIsRUFEYztBQUVkYixXQUFPYSxHQUFQLENBQVcsTUFBWCxFQUFtQmlCLEtBQW5CLEVBRmM7O0FBSWQsUUFBSVYsUUFBUUssTUFBUixLQUFtQixLQUF2QixFQUE4QjtBQUM1QkosZUFBU00sU0FBVCxDQUFtQixHQUFuQixFQUF3QixFQUFFLGdCQUFnQixrQkFBbEIsRUFBeEIsRUFENEI7QUFFNUJOLGVBQVNPLEdBQVQsR0FGNEI7QUFHNUI7QUFDRCxLQUpELDJEQUpjO0FBU2QsUUFBSVIsUUFBUUssTUFBUixLQUFtQixNQUF2QixFQUErQjtBQUM3QkosZUFBU00sU0FBVCxDQUFtQixHQUFuQixFQUF3QixFQUFFLGdCQUFnQixrQkFBbEIsRUFBeEIsRUFENkI7QUFFN0JOLGVBQVNPLEdBQVQsR0FGNkI7QUFHN0I7QUFDRCxLQUpELDJEQVRjO0FBY2QsUUFBSVIsUUFBUUssTUFBUixLQUFtQixRQUF2QixFQUFpQztBQUMvQkosZUFBU00sU0FBVCxDQUFtQixHQUFuQixFQUF3QixFQUFFLGdCQUFnQixrQkFBbEIsRUFBeEIsRUFEK0I7QUFFL0JOLGVBQVNPLEdBQVQsR0FGK0I7QUFHL0I7QUFDRCxLQUpEO0FBS0QsR0FoQ0g7QUFpQ0QsQ0FwQ0QiLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZXF1ZXN0UGFyc2VyID0gcmVxdWlyZSgnLi9yZXF1ZXN0LXBhcnNlcicpO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcblxuY29uc3Qgcm91dGVIYW5kbGVycyA9IHtcbiAgUE9TVDoge30sXG4gIEdFVDoge30sXG4gIERFTEVURToge30sXG4gIFBVVDoge30sXG59O1xuXG5cbmNvbnN0IHJvdXRlciA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbmNvbnN0IGxvZ1VybEFuZENhbGxiYWNrID0gKGh0dHBNZXRob2QsIHVybCwgY2FsbGJhY2spID0+IHtcbiAgbG9nZ2VyLmxvZygnaW5mbycsYEFkZGluZyBhICR7aHR0cE1ldGhvZH0gdXJsIGFuZCBjYWxsYmFja2ApO1xuICBsb2dnZXIubG9nKCdpbmZvJyx1cmwpO1xuICBsb2dnZXIubG9nKCdpbmZvJyxjYWxsYmFjay50b1N0cmluZygpKTtcbn07XG5cbnJvdXRlci5nZXQgPSAodXJsLCBjYWxsYmFjaykgPT4ge1xuICBsb2dVcmxBbmRDYWxsYmFjaygnR0VUJywgdXJsLCBjYWxsYmFjayk7XG4gIHJvdXRlSGFuZGxlcnMuR0VUW3VybF0gPSBjYWxsYmFjaztcbn07XG5cbnJvdXRlci5wb3N0ID0gKHVybCwgY2FsbGJhY2spID0+IHtcbiAgbG9nVXJsQW5kQ2FsbGJhY2soJ1BPU1QnLCB1cmwsIGNhbGxiYWNrKTtcbiAgcm91dGVIYW5kbGVycy5QT1NUW3VybF0gPSBjYWxsYmFjaztcbn07XG5cbnJvdXRlci5wdXQgPSAodXJsLCBjYWxsYmFjaykgPT4ge1xuICBsb2dVcmxBbmRDYWxsYmFjaygnUFVUJywgdXJsLCBjYWxsYmFjayk7XG4gIHJvdXRlSGFuZGxlcnMuUFVUW3VybF0gPSBjYWxsYmFjaztcbn07XG5cbnJvdXRlci5kZWxldGUgPSAodXJsLCBjYWxsYmFjaykgPT4ge1xuICBsb2dVcmxBbmRDYWxsYmFjaygnREVMRVRFJywgdXJsLCBjYWxsYmFjayk7XG4gIHJvdXRlSGFuZGxlcnMuREVMRVRFW3VybF0gPSBjYWxsYmFjaztcbn07XG5cbnJvdXRlci5yb3V0ZSA9IChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xuICBsb2dnZXIubG9nKCdpbmZvJywgJ1JvdXRpbmcgYSBSZXF1ZXN0Jyk7XG5cbiAgcmVxdWVzdFBhcnNlci5wYXJzZShyZXF1ZXN0KVxuICAgIC50aGVuKHJlcXVlc3QgPT4ge1xuICAgICAgbGV0IGhhbmRsZXJGb3VuZCA9IHJvdXRlSGFuZGxlcnNbcmVxdWVzdC5tZXRob2RdW3JlcXVlc3QudXJsLnBhdGhuYW1lXTtcbiAgICAgIGxvZ2dlci5sb2coJ2luZm8nLCAnRm91bmQgdGhlIGZvbGxvd2luZyBoYW5kbGVyJyk7XG4gICAgICBsb2dnZXIubG9nKCdpbmZvJywgaGFuZGxlckZvdW5kLnRvU3RyaW5nKCkpO1xuICAgICAgaWYgKGhhbmRsZXJGb3VuZCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlckZvdW5kKHJlcXVlc3QsIHJlc3BvbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlLndyaXRlSGVhZCg0MDQpO1xuICAgICAgICByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGxvZ2dlci5sb2coJ2luZm8nLCAnX19SRVFVRVNUX0VSUk9SX18nKTtcbiAgICAgIGxvZ2dlci5sb2coJ2luZm8nLCBlcnJvcik7XG5cbiAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgcmVzcG9uc2Uud3JpdGVIZWFkKDQwNCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xuICAgICAgICByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICAgICAgcmVzcG9uc2Uud3JpdGVIZWFkKDQwMCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xuICAgICAgICByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnREVMRVRFJykge1xuICAgICAgICByZXNwb25zZS53cml0ZUhlYWQoNDA0LCB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24uanNvbicgfSk7XG4gICAgICAgIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG59O1xuIl19