d777db3128f22b4a4074fdf2000df111
'use strict'; /* istanbul ignore next */var cov_17iwyeiy26 = function () {var path = '/home/cameron/Programming/CodeFellows/401/labs/08-09-vanilla-rest-server/lab-cameron/route/user-router.js',hash = '44bd666a1ba15a415fda0ede8294b2c55434a8cd',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/home/cameron/Programming/CodeFellows/401/labs/08-09-vanilla-rest-server/lab-cameron/route/user-router.js', statementMap: { '0': { start: { line: 3, column: 13 }, end: { line: 3, column: 37 } }, '1': { start: { line: 4, column: 15 }, end: { line: 4, column: 39 } }, '2': { start: { line: 5, column: 15 }, end: { line: 5, column: 39 } }, '3': { start: { line: 6, column: 16 }, end: { line: 6, column: 41 } }, '4': { start: { line: 8, column: 19 }, end: { line: 13, column: 1 } }, '5': { start: { line: 9, column: 2 }, end: { line: 9, column: 74 } }, '6': { start: { line: 11, column: 2 }, end: { line: 11, column: 29 } }, '7': { start: { line: 12, column: 2 }, end: { line: 12, column: 17 } }, '8': { start: { line: 15, column: 17 }, end: { line: 25, column: 1 } }, '9': { start: { line: 16, column: 2 }, end: { line: 16, column: 80 } }, '10': { start: { line: 17, column: 2 }, end: { line: 17, column: 31 } }, '11': { start: { line: 18, column: 2 }, end: { line: 20, column: 5 } }, '12': { start: { line: 22, column: 2 }, end: { line: 22, column: 43 } }, '13': { start: { line: 23, column: 2 }, end: { line: 23, column: 17 } }, '14': { start: { line: 24, column: 2 }, end: { line: 24, column: 9 } }, '15': { start: { line: 27, column: 23 }, end: { line: 34, column: 1 } }, '16': { start: { line: 28, column: 2 }, end: { line: 32, column: 3 } }, '17': { start: { line: 29, column: 4 }, end: { line: 31, column: 5 } }, '18': { start: { line: 30, column: 6 }, end: { line: 30, column: 22 } }, '19': { start: { line: 33, column: 2 }, end: { line: 33, column: 14 } }, '20': { start: { line: 36, column: 0 }, end: { line: 59, column: 3 } }, '21': { start: { line: 37, column: 17 }, end: { line: 37, column: 37 } }, '22': { start: { line: 39, column: 2 }, end: { line: 56, column: 7 } }, '23': { start: { line: 41, column: 6 }, end: { line: 49, column: 7 } }, '24': { start: { line: 42, column: 32 }, end: { line: 42, column: 64 } }, '25': { start: { line: 44, column: 8 }, end: { line: 46, column: 52 } }, '26': { start: { line: 48, column: 8 }, end: { line: 48, column: 15 } }, '27': { start: { line: 50, column: 6 }, end: { line: 50, column: 40 } }, '28': { start: { line: 51, column: 6 }, end: { line: 51, column: 13 } }, '29': { start: { line: 54, column: 6 }, end: { line: 54, column: 39 } }, '30': { start: { line: 55, column: 6 }, end: { line: 55, column: 13 } }, '31': { start: { line: 61, column: 0 }, end: { line: 85, column: 3 } }, '32': { start: { line: 62, column: 2 }, end: { line: 65, column: 3 } }, '33': { start: { line: 63, column: 4 }, end: { line: 63, column: 48 } }, '34': { start: { line: 64, column: 4 }, end: { line: 64, column: 11 } }, '35': { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, '36': { start: { line: 67, column: 4 }, end: { line: 67, column: 49 } }, '37': { start: { line: 68, column: 4 }, end: { line: 68, column: 11 } }, '38': { start: { line: 70, column: 2 }, end: { line: 73, column: 3 } }, '39': { start: { line: 71, column: 4 }, end: { line: 71, column: 51 } }, '40': { start: { line: 72, column: 4 }, end: { line: 72, column: 11 } }, '41': { start: { line: 75, column: 13 }, end: { line: 75, column: 66 } }, '42': { start: { line: 76, column: 2 }, end: { line: 84, column: 7 } }, '43': { start: { line: 78, column: 6 }, end: { line: 78, column: 36 } }, '44': { start: { line: 79, column: 6 }, end: { line: 79, column: 13 } }, '45': { start: { line: 82, column: 6 }, end: { line: 82, column: 39 } }, '46': { start: { line: 83, column: 6 }, end: { line: 83, column: 13 } }, '47': { start: { line: 87, column: 0 }, end: { line: 105, column: 3 } }, '48': { start: { line: 88, column: 2 }, end: { line: 104, column: 3 } }, '49': { start: { line: 89, column: 28 }, end: { line: 89, column: 64 } }, '50': { start: { line: 90, column: 4 }, end: { line: 100, column: 5 } }, '51': { start: { line: 91, column: 27 }, end: { line: 94, column: 8 } }, '52': { start: { line: 92, column: 8 }, end: { line: 92, column: 57 } }, '53': { start: { line: 93, column: 8 }, end: { line: 93, column: 54 } }, '54': { start: { line: 95, column: 6 }, end: { line: 95, column: 27 } }, '55': { start: { line: 96, column: 6 }, end: { line: 96, column: 37 } }, '56': { start: { line: 97, column: 6 }, end: { line: 97, column: 13 } }, '57': { start: { line: 99, column: 6 }, end: { line: 99, column: 52 } }, '58': { start: { line: 102, column: 4 }, end: { line: 102, column: 48 } }, '59': { start: { line: 103, column: 4 }, end: { line: 103, column: 11 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 8, column: 19 }, end: { line: 8, column: 20 } }, loc: { start: { line: 8, column: 50 }, end: { line: 13, column: 1 } }, line: 8 }, '1': { name: '(anonymous_1)', decl: { start: { line: 15, column: 17 }, end: { line: 15, column: 18 } }, loc: { start: { line: 15, column: 49 }, end: { line: 25, column: 1 } }, line: 15 }, '2': { name: '(anonymous_2)', decl: { start: { line: 27, column: 23 }, end: { line: 27, column: 24 } }, loc: { start: { line: 27, column: 47 }, end: { line: 34, column: 1 } }, line: 27 }, '3': { name: '(anonymous_3)', decl: { start: { line: 36, column: 25 }, end: { line: 36, column: 26 } }, loc: { start: { line: 36, column: 48 }, end: { line: 59, column: 1 } }, line: 36 }, '4': { name: '(anonymous_4)', decl: { start: { line: 40, column: 10 }, end: { line: 40, column: 11 } }, loc: { start: { line: 40, column: 22 }, end: { line: 52, column: 5 } }, line: 40 }, '5': { name: '(anonymous_5)', decl: { start: { line: 53, column: 11 }, end: { line: 53, column: 12 } }, loc: { start: { line: 53, column: 20 }, end: { line: 56, column: 5 } }, line: 53 }, '6': { name: '(anonymous_6)', decl: { start: { line: 61, column: 26 }, end: { line: 61, column: 27 } }, loc: { start: { line: 61, column: 49 }, end: { line: 85, column: 1 } }, line: 61 }, '7': { name: '(anonymous_7)', decl: { start: { line: 77, column: 10 }, end: { line: 77, column: 11 } }, loc: { start: { line: 77, column: 16 }, end: { line: 80, column: 5 } }, line: 77 }, '8': { name: '(anonymous_8)', decl: { start: { line: 81, column: 11 }, end: { line: 81, column: 12 } }, loc: { start: { line: 81, column: 20 }, end: { line: 84, column: 5 } }, line: 81 }, '9': { name: '(anonymous_9)', decl: { start: { line: 87, column: 28 }, end: { line: 87, column: 29 } }, loc: { start: { line: 87, column: 51 }, end: { line: 105, column: 1 } }, line: 87 }, '10': { name: '(anonymous_10)', decl: { start: { line: 91, column: 40 }, end: { line: 91, column: 41 } }, loc: { start: { line: 91, column: 48 }, end: { line: 94, column: 7 } }, line: 91 } }, branchMap: { '0': { loc: { start: { line: 29, column: 4 }, end: { line: 31, column: 5 } }, type: 'if', locations: [{ start: { line: 29, column: 4 }, end: { line: 31, column: 5 } }, { start: { line: 29, column: 4 }, end: { line: 31, column: 5 } }], line: 29 }, '1': { loc: { start: { line: 41, column: 6 }, end: { line: 49, column: 7 } }, type: 'if', locations: [{ start: { line: 41, column: 6 }, end: { line: 49, column: 7 } }, { start: { line: 41, column: 6 }, end: { line: 49, column: 7 } }], line: 41 }, '2': { loc: { start: { line: 44, column: 8 }, end: { line: 46, column: 51 } }, type: 'cond-expr', locations: [{ start: { line: 45, column: 10 }, end: { line: 45, column: 50 } }, { start: { line: 46, column: 10 }, end: { line: 46, column: 51 } }], line: 44 }, '3': { loc: { start: { line: 62, column: 2 }, end: { line: 65, column: 3 } }, type: 'if', locations: [{ start: { line: 62, column: 2 }, end: { line: 65, column: 3 } }, { start: { line: 62, column: 2 }, end: { line: 65, column: 3 } }], line: 62 }, '4': { loc: { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, type: 'if', locations: [{ start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }], line: 66 }, '5': { loc: { start: { line: 70, column: 2 }, end: { line: 73, column: 3 } }, type: 'if', locations: [{ start: { line: 70, column: 2 }, end: { line: 73, column: 3 } }, { start: { line: 70, column: 2 }, end: { line: 73, column: 3 } }], line: 70 }, '6': { loc: { start: { line: 88, column: 2 }, end: { line: 104, column: 3 } }, type: 'if', locations: [{ start: { line: 88, column: 2 }, end: { line: 104, column: 3 } }, { start: { line: 88, column: 2 }, end: { line: 104, column: 3 } }], line: 88 }, '7': { loc: { start: { line: 90, column: 4 }, end: { line: 100, column: 5 } }, type: 'if', locations: [{ start: { line: 90, column: 4 }, end: { line: 100, column: 5 } }, { start: { line: 90, column: 4 }, end: { line: 100, column: 5 } }], line: 90 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0, '35': 0, '36': 0, '37': 0, '38': 0, '39': 0, '40': 0, '41': 0, '42': 0, '43': 0, '44': 0, '45': 0, '46': 0, '47': 0, '48': 0, '49': 0, '50': 0, '51': 0, '52': 0, '53': 0, '54': 0, '55': 0, '56': 0, '57': 0, '58': 0, '59': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0], '5': [0, 0], '6': [0, 0], '7': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();

const User = /* istanbul ignore next */(cov_17iwyeiy26.s[0]++, require('../model/user'));
const router = /* istanbul ignore next */(cov_17iwyeiy26.s[1]++, require('../lib/router'));
const logger = /* istanbul ignore next */(cov_17iwyeiy26.s[2]++, require('../lib/logger'));
const storage = /* istanbul ignore next */(cov_17iwyeiy26.s[3]++, require('../lib/storage')); /* istanbul ignore next */cov_17iwyeiy26.s[4]++;

const sendStatus = (response, status, message) => {/* istanbul ignore next */cov_17iwyeiy26.f[0]++;cov_17iwyeiy26.s[5]++;
  logger.log('info', `Responding with a ${status} code due to ${message}`); /* istanbul ignore next */cov_17iwyeiy26.s[6]++;

  response.writeHead(status); /* istanbul ignore next */cov_17iwyeiy26.s[7]++;
  response.end();
}; /* istanbul ignore next */cov_17iwyeiy26.s[8]++;

const sendJSON = (response, status, jsonData) => {/* istanbul ignore next */cov_17iwyeiy26.f[1]++;cov_17iwyeiy26.s[9]++;
  logger.log('info', `Responding with a ${status} code and the following data`); /* istanbul ignore next */cov_17iwyeiy26.s[10]++;
  logger.log('info', jsonData); /* istanbul ignore next */cov_17iwyeiy26.s[11]++;
  response.writeHead(status, {
    'Content-Type': 'application/json' }); /* istanbul ignore next */cov_17iwyeiy26.s[12]++;


  response.write(JSON.stringify(jsonData)); /* istanbul ignore next */cov_17iwyeiy26.s[13]++;
  response.end(); /* istanbul ignore next */cov_17iwyeiy26.s[14]++;
  return;
}; /* istanbul ignore next */cov_17iwyeiy26.s[15]++;

const findUserWithId = (querystring, users) => {/* istanbul ignore next */cov_17iwyeiy26.f[2]++;cov_17iwyeiy26.s[16]++;
  for (let i = 0; i < users.length; i++) {/* istanbul ignore next */cov_17iwyeiy26.s[17]++;
    if (users[i].testId === querystring) {/* istanbul ignore next */cov_17iwyeiy26.b[0][0]++;cov_17iwyeiy26.s[18]++;
      return users[i];
    } else /* istanbul ignore next */{cov_17iwyeiy26.b[0][1]++;}
  } /* istanbul ignore next */cov_17iwyeiy26.s[19]++;
  return null;
}; /* istanbul ignore next */cov_17iwyeiy26.s[20]++;

router.get('/api/users', (request, response) => {/* istanbul ignore next */cov_17iwyeiy26.f[3]++;
  const userId = /* istanbul ignore next */(cov_17iwyeiy26.s[21]++, request.url.query.id); /* istanbul ignore next */cov_17iwyeiy26.s[22]++;

  storage.fetchAll().
  then(allUsers => {/* istanbul ignore next */cov_17iwyeiy26.f[4]++;cov_17iwyeiy26.s[23]++;
    if (userId) {/* istanbul ignore next */cov_17iwyeiy26.b[1][0]++;
      const foundUserWithId = /* istanbul ignore next */(cov_17iwyeiy26.s[24]++, findUserWithId(userId, allUsers)); /* istanbul ignore next */cov_17iwyeiy26.s[25]++;

      foundUserWithId ? /* istanbul ignore next */(cov_17iwyeiy26.b[2][0]++,
      sendJSON(response, 200, foundUserWithId)) : /* istanbul ignore next */(cov_17iwyeiy26.b[2][1]++,
      sendStatus(response, 404, 'id not found')); /* istanbul ignore next */cov_17iwyeiy26.s[26]++;

      return;
    } else /* istanbul ignore next */{cov_17iwyeiy26.b[1][1]++;}cov_17iwyeiy26.s[27]++;
    sendJSON(response, 200, allUsers); /* istanbul ignore next */cov_17iwyeiy26.s[28]++;
    return;
  }).
  catch(error => {/* istanbul ignore next */cov_17iwyeiy26.f[5]++;cov_17iwyeiy26.s[29]++;
    sendStatus(response, 500, error); /* istanbul ignore next */cov_17iwyeiy26.s[30]++;
    return;
  });


}); /* istanbul ignore next */cov_17iwyeiy26.s[31]++;

router.post('/api/users', (request, response) => {/* istanbul ignore next */cov_17iwyeiy26.f[6]++;cov_17iwyeiy26.s[32]++;
  if (!request.body) {/* istanbul ignore next */cov_17iwyeiy26.b[3][0]++;cov_17iwyeiy26.s[33]++;
    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_17iwyeiy26.s[34]++;
    return;
  } else /* istanbul ignore next */{cov_17iwyeiy26.b[3][1]++;}cov_17iwyeiy26.s[35]++;
  if (!request.body.name) {/* istanbul ignore next */cov_17iwyeiy26.b[4][0]++;cov_17iwyeiy26.s[36]++;
    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_17iwyeiy26.s[37]++;
    return;
  } else /* istanbul ignore next */{cov_17iwyeiy26.b[4][1]++;}cov_17iwyeiy26.s[38]++;
  if (!request.body.description) {/* istanbul ignore next */cov_17iwyeiy26.b[5][0]++;cov_17iwyeiy26.s[39]++;
    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_17iwyeiy26.s[40]++;
    return;
  } else /* istanbul ignore next */{cov_17iwyeiy26.b[5][1]++;}

  let user = /* istanbul ignore next */(cov_17iwyeiy26.s[41]++, new User(request.body.name, request.body.description)); /* istanbul ignore next */cov_17iwyeiy26.s[42]++;
  storage.addItem(user).
  then(() => {/* istanbul ignore next */cov_17iwyeiy26.f[7]++;cov_17iwyeiy26.s[43]++;
    sendJSON(response, 200, user); /* istanbul ignore next */cov_17iwyeiy26.s[44]++;
    return;
  }).
  catch(error => {/* istanbul ignore next */cov_17iwyeiy26.f[8]++;cov_17iwyeiy26.s[45]++;
    sendStatus(response, 500, error); /* istanbul ignore next */cov_17iwyeiy26.s[46]++;
    return;
  });
}); /* istanbul ignore next */cov_17iwyeiy26.s[47]++;

router.delete('/api/users', (request, response) => {/* istanbul ignore next */cov_17iwyeiy26.f[9]++;cov_17iwyeiy26.s[48]++;
  if (request.url.query.id) {/* istanbul ignore next */cov_17iwyeiy26.b[6][0]++;
    const userToBeRemoved = /* istanbul ignore next */(cov_17iwyeiy26.s[49]++, findUserWithId(request.url.query.id)); /* istanbul ignore next */cov_17iwyeiy26.s[50]++;
    if (userToBeRemoved) {/* istanbul ignore next */cov_17iwyeiy26.b[7][0]++;
      const updatedUsers = /* istanbul ignore next */(cov_17iwyeiy26.s[51]++, users.filter(user => {/* istanbul ignore next */cov_17iwyeiy26.f[10]++;cov_17iwyeiy26.s[52]++;
        console.log(userToBeRemoved.testId, user.testId); /* istanbul ignore next */cov_17iwyeiy26.s[53]++;
        return userToBeRemoved.testId === user.testId;
      })); /* istanbul ignore next */cov_17iwyeiy26.s[54]++;
      users = updatedUsers; /* istanbul ignore next */cov_17iwyeiy26.s[55]++;
      sendJSON(response, 204, users); /* istanbul ignore next */cov_17iwyeiy26.s[56]++;
      return;
    } else {/* istanbul ignore next */cov_17iwyeiy26.b[7][1]++;cov_17iwyeiy26.s[57]++;
      sendStatus(response, 404, 'id does not exit');
    }
  } else {/* istanbul ignore next */cov_17iwyeiy26.b[6][1]++;cov_17iwyeiy26.s[58]++;
    sendStatus(response, 400, 'no id provided'); /* istanbul ignore next */cov_17iwyeiy26.s[59]++;
    return;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,