{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:33:58.856Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:33:58.896Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:33:58.898Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T23:33:58.898Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:53:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-06T23:33:58.898Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:43:19.611Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T23:43:19.612Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:43:19.612Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:43:19.649Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:43:19.694Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:43:19.695Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:43:19.695Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:43:19.695Z"}
{"id":"3d2c11f0-dadf-11e7-9f6b-abc108474ed8","timestamp":"2017-12-06T23:43:19.695Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:52:18.667Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T23:52:18.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:52:18.668Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:52:18.722Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:52:18.767Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:52:18.768Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T23:52:18.768Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-06T23:52:18.768Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:53:22.687Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:53:22.688Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:53:22.688Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:53:22.730Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:53:22.774Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:53:22.775Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:53:22.775Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:53:22.775Z"}
{"id":"a4a2c670-dae0-11e7-8dc4-5f2d36ae5c7b","timestamp":"2017-12-06T23:53:22.775Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:55:27.829Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:55:27.830Z"}
{"level":"info","message":"(request, response) => {\n  // Here, I know that my request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // Here, I can create my book since all test pass\n  let book = new Book(request.body.title,request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:55:27.830Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:55:38.997Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:55:38.998Z"}
{"level":"info","message":"(request, response) => {\n  // Here, I know that my request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // Here, I can create my book since all test pass\n  let book = new Book(request.body.title,request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:55:38.998Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T23:57:41.314Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-06T23:57:41.315Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:57:41.315Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T23:57:41.371Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T23:57:41.416Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T23:57:41.417Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // Here, I can create my book since all test pass\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-06T23:57:41.417Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T23:57:41.417Z"}
{"id":"3ecc6990-dae1-11e7-8984-11802bb3bbd8","timestamp":"2017-12-06T23:57:41.417Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:07:54.070Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:07:54.071Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:07:54.071Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:07:54.109Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:07:54.152Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:07:54.153Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:07:54.153Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:07:54.154Z"}
{"id":"ac04a8a0-dae2-11e7-bd39-3983c845ded6","timestamp":"2017-12-07T00:07:54.154Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:07:54.163Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:07:54.163Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:07:54.163Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.707Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:10:32.741Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.753Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:10:32.754Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.754Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:10:32.755Z"}
{"id":"0a8d4030-dae3-11e7-b61c-cb138e52871f","timestamp":"2017-12-07T00:10:32.755Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.762Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:10:32.763Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:10:32.766Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:10:32.766Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:10:32.766Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:11:32.670Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:11:32.671Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.671Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:11:32.705Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.718Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:11:32.719Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.719Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:11:32.719Z"}
{"id":"2e4b07f0-dae3-11e7-808b-a75f0d5f1637","timestamp":"2017-12-07T00:11:32.719Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:11:32.727Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:11:32.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:11:32.730Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:11:32.730Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:12:45.073Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:12:45.074Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.074Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:12:45.116Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.129Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:12:45.130Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.130Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:12:45.130Z"}
{"id":"597412a0-dae3-11e7-89e0-95513271f48a","timestamp":"2017-12-07T00:12:45.130Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:12:45.139Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:12:45.140Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:12:45.142Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:12:45.142Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:12:45.142Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:18:04.100Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:18:04.100Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.101Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:18:04.136Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.187Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:18:04.188Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.189Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:18:04.189Z"}
{"id":"17a09cd0-dae4-11e7-b16f-cf8d43ef65b4","timestamp":"2017-12-07T00:18:04.189Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:18:04.198Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:18:04.200Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:18:04.201Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:18:04.201Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:25:15.543Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:25:15.544Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:25:15.544Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:25:15.550Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:28:15.503Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:28:15.504Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:28:15.504Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:28:15.510Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:28:49.474Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:28:49.476Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:28:49.476Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:28:49.485Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:33:09.972Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:33:09.973Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:33:09.973Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:33:09.973Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:36:44.445Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:36:44.445Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:36:44.445Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:38:15.607Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:38:15.607Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:38:15.607Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:40:36.860Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:40:36.861Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:40:36.861Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:40:41.920Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:40:41.921Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:40:41.921Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:40:41.921Z"}
{"id":"40e61310-dae7-11e7-93d2-7559fe698e88","timestamp":"2017-12-07T00:40:41.921Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:40:41.930Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:40:41.931Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:40:41.931Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:40:41.931Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:40:41.933Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:40:41.933Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:40:41.933Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T00:40:41.934Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:41:27.004Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:41:27.005Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:41:27.005Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:41:32.056Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:41:32.056Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:41:32.056Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:41:32.056Z"}
{"id":"5ec81180-dae7-11e7-93d2-7559fe698e88","timestamp":"2017-12-07T00:41:32.056Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:41:32.065Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:41:32.066Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:41:32.066Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:41:32.066Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:41:32.068Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:41:32.068Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:41:32.068Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T00:41:32.069Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:42:37.371Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:42:37.371Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:42:37.371Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:42:42.425Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:42:42.425Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:42:42.425Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:42:42.425Z"}
{"id":"88b98690-dae7-11e7-93d2-7559fe698e88","timestamp":"2017-12-07T00:42:42.425Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:42:42.435Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:42:42.437Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:42:42.437Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:42:42.437Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T00:42:42.438Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:44:48.760Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:44:48.761Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:44:48.761Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:44:48.797Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:44:48.810Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:44:48.811Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:44:48.811Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:44:48.812Z"}
{"id":"d40e7fb0-dae7-11e7-b42a-6f2871ca2543","timestamp":"2017-12-07T00:44:48.812Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:44:48.819Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:44:48.820Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:44:48.820Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:44:48.820Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:44:48.822Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:44:48.823Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:44:48.823Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:45:19.145Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:45:19.145Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:45:19.145Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:45:19.185Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:45:19.198Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:45:19.199Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:45:19.199Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:45:19.199Z"}
{"id":"e62b56f0-dae7-11e7-9637-110bf53987e9","timestamp":"2017-12-07T00:45:19.199Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:45:19.207Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:45:19.208Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:45:19.208Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:45:19.208Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:45:19.210Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:45:19.211Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:45:19.211Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:46:48.094Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:46:48.095Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:48.095Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:46:48.100Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:46:54.932Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:46:54.933Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:54.933Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:46:54.975Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:46:54.988Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:46:54.989Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:54.989Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:46:54.989Z"}
{"id":"1f43bbd0-dae8-11e7-869f-634634aaf79a","timestamp":"2017-12-07T00:46:54.989Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:46:54.997Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:46:55.000Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:46:55.000Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:46:55.000Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T00:59:54.350Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T00:59:54.351Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:59:54.351Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T00:59:54.391Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:59:54.434Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:59:54.435Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:59:54.435Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T00:59:54.436Z"}
{"id":"efd9e840-dae9-11e7-a70a-b304672f7017","timestamp":"2017-12-07T00:59:54.436Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:59:54.443Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T00:59:54.443Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T00:59:54.444Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T00:59:54.444Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T00:59:54.446Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T00:59:54.446Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T00:59:54.446Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:12:20.202Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:12:20.203Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:12:20.203Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:12:20.238Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:12:20.250Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:12:20.251Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:12:20.251Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:12:20.252Z"}
{"id":"ac643eb0-daeb-11e7-aaad-cd7d321540c9","timestamp":"2017-12-07T01:12:20.252Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:12:20.259Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:12:20.260Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:12:20.260Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:12:20.260Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:12:20.262Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:12:20.262Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:12:20.262Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:24:07.646Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:24:07.647Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:24:07.647Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:24:07.652Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:24:24.482Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:24:24.484Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:24:24.484Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:24:45.291Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:24:45.291Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:24:45.291Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:25:25.878Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:25:25.879Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:25:25.879Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:26:00.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:26:00.730Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:26:00.730Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:27:01.172Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:27:01.172Z"}
{"message":"Unexpected token “ in JSON at position 1","stack":"SyntaxError: Unexpected token “ in JSON at position 1\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:27:01.172Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:28:16.219Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:28:16.219Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:28:16.219Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:28:16.220Z"}
{"id":"e63189c0-daed-11e7-b1c5-c5d9117e46b9","timestamp":"2017-12-07T01:28:16.220Z","title":"Harry Potter","author":"Catherine","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:00.862Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:30:00.863Z"}
{"level":"info","message":"(request, response) => {\n  // Request has been pre-parsed\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  // All tests pass, new book is created\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:00.863Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:30:00.863Z"}
{"id":"2490caf0-daee-11e7-b1c5-c5d9117e46b9","timestamp":"2017-12-07T01:30:00.863Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:30:37.522Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:30:37.523Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:37.523Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:30:37.565Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:37.611Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:30:37.612Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:37.612Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:30:37.612Z"}
{"id":"3a783ec0-daee-11e7-849c-5b86b9612dc2","timestamp":"2017-12-07T01:30:37.612Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  // Request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  // All tests pass, new book is created\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:30:37.621Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:30:37.623Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:30:37.624Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:30:37.624Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:32:02.259Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:32:02.260Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  console.log(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:02.260Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:32:02.266Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:35.095Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:32:35.096Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  console.log(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:35.096Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:32:35.098Z"}
{"id":"807f0890-daee-11e7-8cb2-5b2a7e64fbc4","timestamp":"2017-12-07T01:32:35.098Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:32:54.956Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:32:54.957Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:54.957Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:32:55.020Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:55.073Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:32:55.074Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:55.074Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:32:55.077Z"}
{"id":"8c676f30-daee-11e7-a217-0d6e2e987cba","timestamp":"2017-12-07T01:32:55.077Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:32:55.087Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:32:55.090Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:32:55.090Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:32:55.090Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:34:52.131Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  console.log(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"/api/books?id=${id}","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"(request, response) => {\n  sendJSON(request.body);\n}","timestamp":"2017-12-07T01:34:52.132Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:34:52.138Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:34:55.829Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:34:55.830Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:34:55.830Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:39)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:34:55.831Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:40:53.841Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"/api/books?id=${id}","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(request.body);\n}","timestamp":"2017-12-07T01:40:53.842Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:40:53.883Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.927Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:40:53.928Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:40:53.928Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:40:53.930Z"}
{"id":"a9d29a80-daef-11e7-bbff-6b0da682fef5","timestamp":"2017-12-07T01:40:53.930Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.938Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:40:53.939Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:40:53.939Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:40:53.939Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.941Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:40:53.941Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:40:53.941Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:40:53.943Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:40:53.943Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:40:53.943Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:40:53.943Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:43:05.021Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:05.022Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:43:05.063Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.107Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:05.108Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:05.108Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:05.110Z"}
{"id":"f8033c50-daef-11e7-93bb-970f241fc081","timestamp":"2017-12-07T01:43:05.110Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:43:05.119Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.121Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:43:05.121Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:43:05.121Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:05.123Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:05.123Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:05.123Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:05.123Z"}
[{"id":"f8033c50-daef-11e7-93bb-970f241fc081","timestamp":"2017-12-07T01:43:05.109Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:43:24.605Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:24.606Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:43:24.648Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.694Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:24.695Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:24.695Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:24.697Z"}
{"id":"03afd270-daf0-11e7-adda-75ed14914844","timestamp":"2017-12-07T01:43:24.697Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:43:24.705Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.707Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:43:24.708Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:43:24.708Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:43:24.709Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:43:24.709Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:43:24.709Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:43:24.710Z"}
[{"id":"03afd270-daf0-11e7-adda-75ed14914844","timestamp":"2017-12-07T01:43:24.695Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:44:46.528Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:44:46.529Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(response); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:44:46.529Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:44:46.576Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.624Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:44:46.625Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:44:46.625Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:44:46.627Z"}
{"id":"34855910-daf0-11e7-8ee8-a1a845b0bb87","timestamp":"2017-12-07T01:44:46.627Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.636Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:44:46.637Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:44:46.637Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:44:46.637Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.639Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:44:46.639Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:44:46.640Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:44:46.642Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:44:46.642Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(response); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T01:44:46.642Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:44:46.645Z"}
[{"id":"34855910-daf0-11e7-8ee8-a1a845b0bb87","timestamp":"2017-12-07T01:44:46.625Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:45:35.247Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:45:35.248Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:45:35.290Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.334Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:45:35.335Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:45:35.335Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:45:35.337Z"}
{"id":"518e0e80-daf0-11e7-93f7-c5c324a16543","timestamp":"2017-12-07T01:45:35.337Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.345Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:45:35.346Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:45:35.346Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:45:35.346Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.348Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:45:35.348Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:45:35.348Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:45:35.350Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:45:35.350Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:45:35.350Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:45:35.351Z"}
[{"id":"518e0e80-daf0-11e7-93f7-c5c324a16543","timestamp":"2017-12-07T01:45:35.336Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:48:00.938Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:00.938Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:48:00.939Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:48:00.981Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.026Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:01.028Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:01.028Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:48:01.030Z"}
{"id":"a864e440-daf0-11e7-9ffe-c5b0968404e7","timestamp":"2017-12-07T01:48:01.030Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:48:01.038Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.040Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:01.040Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:48:01.040Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:01.042Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:01.042Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:48:01.042Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:01.043Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:48:01.043Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:48:39.306Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0]['title']); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:48:39.307Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:48:39.349Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.395Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:39.396Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:39.396Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:48:39.398Z"}
{"id":"bf436240-daf0-11e7-afa3-53046edba878","timestamp":"2017-12-07T01:48:39.398Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.406Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:39.406Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:48:39.406Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:48:39.407Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.409Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:39.409Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:48:39.409Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0]['title']); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:48:39.411Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:48:39.411Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:49:05.794Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:05.794Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:05.795Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:49:05.838Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.883Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:05.884Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:05.885Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:49:05.886Z"}
{"id":"cf0d48d0-daf0-11e7-8b22-0192bb817d56","timestamp":"2017-12-07T01:49:05.886Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.895Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:05.895Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:05.895Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:49:05.896Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.898Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:05.898Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:49:05.898Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0]['title'], 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:05.900Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:49:05.900Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:49:43.054Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:43.055Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:49:43.101Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.145Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:43.147Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:43.147Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:49:43.148Z"}
{"id":"e54303b0-daf0-11e7-b64b-fbc2fac7397f","timestamp":"2017-12-07T01:49:43.149Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:49:43.157Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.159Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:43.160Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:49:43.160Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:49:43.161Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:49:43.161Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log(response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:49:43.161Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:49:43.162Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:49:43.162Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:50:01.620Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log('title', response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:50:01.621Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:50:01.666Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.713Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:50:01.714Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:50:01.714Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:50:01.716Z"}
{"id":"f0544430-daf0-11e7-87d1-ad78e10bd84c","timestamp":"2017-12-07T01:50:01.716Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:50:01.725Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.727Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:50:01.728Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:50:01.728Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:50:01.729Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:50:01.729Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response.body[0].title, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  console.log('title', response.body[0].title); /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n  return;\n}","timestamp":"2017-12-07T01:50:01.730Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:50:01.730Z"}
{"message":"Cannot read property '0' of undefined","stack":"TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:48:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T01:50:01.730Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:51:04.705Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n  // console.log('title', response.body[0].title);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;return;\n}","timestamp":"2017-12-07T01:51:04.706Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:51:04.747Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.792Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:04.794Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:04.794Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:04.795Z"}
{"id":"15ed5ba0-daf1-11e7-8e97-c159dc6fe46f","timestamp":"2017-12-07T01:51:04.795Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.803Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:04.804Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:04.804Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:51:04.804Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.806Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:51:04.806Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:51:04.806Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:04.808Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:04.808Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books);\n  // console.log('title', response.body[0].title);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;return;\n}","timestamp":"2017-12-07T01:51:04.808Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:04.809Z"}
[{"id":"15ed5ba0-daf1-11e7-8e97-c159dc6fe46f","timestamp":"2017-12-07T01:51:04.794Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:51:56.988Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:51:56.989Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:51:56.989Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:51:57.027Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.039Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:57.040Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:57.040Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:57.042Z"}
{"id":"35119e10-daf1-11e7-a71d-973b87484073","timestamp":"2017-12-07T01:51:57.042Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:51:57.050Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.052Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:51:57.053Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:51:57.053Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:51:57.054Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:51:57.055Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:51:57.055Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:51:57.055Z"}
[{"id":"35119e10-daf1-11e7-a71d-973b87484073","timestamp":"2017-12-07T01:51:57.041Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:52:47.021Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:52:47.022Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:52:47.061Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.074Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:52:47.075Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:52:47.075Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:52:47.076Z"}
{"id":"52e43330-daf1-11e7-8c8b-892558f1fae1","timestamp":"2017-12-07T01:52:47.076Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.084Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:52:47.085Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:52:47.085Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:52:47.085Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.087Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:52:47.087Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:52:47.087Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:52:47.089Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:52:47.089Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  console.log(books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return;\n}","timestamp":"2017-12-07T01:52:47.089Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:52:47.089Z"}
[{"id":"52e43330-daf1-11e7-8c8b-892558f1fae1","timestamp":"2017-12-07T01:52:47.075Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T01:53:31.444Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  // console.log(books);\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  return;\n}","timestamp":"2017-12-07T01:53:31.445Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T01:53:31.488Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.535Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:53:31.536Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:53:31.536Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:53:31.538Z"}
{"id":"6d646900-daf1-11e7-812a-bfcea23874bc","timestamp":"2017-12-07T01:53:31.538Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.546Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:53:31.547Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  console.log(book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T01:53:31.547Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T01:53:31.547Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.549Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T01:53:31.549Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T01:53:31.549Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T01:53:31.551Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T01:53:31.551Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  // console.log(books);\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  return;\n}","timestamp":"2017-12-07T01:53:31.551Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T01:53:31.552Z"}
[{"id":"6d646900-daf1-11e7-812a-bfcea23874bc","timestamp":"2017-12-07T01:53:31.536Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:02:58.824Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:02:58.825Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:02:58.825Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:02:58.825Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:02:58.825Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:02:58.825Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:02:58.872Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:02:58.923Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:02:58.924Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:02:58.924Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:02:58.924Z"}
{"id":"bf94f2c0-daf2-11e7-b8ad-1dd130145950","timestamp":"2017-12-07T02:02:58.924Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:02:58.934Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:02:58.934Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:02:58.934Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:02:58.934Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:02:58.936Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:02:58.937Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:02:58.937Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:02:58.938Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:02:58.939Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:02:58.939Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:02:58.939Z"}
[{"id":"bf94f2c0-daf2-11e7-b8ad-1dd130145950","timestamp":"2017-12-07T02:02:58.924Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:14:59.562Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:14:59.563Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:14:59.563Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:14:59.563Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:14:59.563Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:14:59.563Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:15:25.902Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:15:25.902Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:15:25.902Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:15:25.902Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:15:25.902Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:15:25.902Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:15:25.945Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:15:25.988Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:15:25.989Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:15:25.989Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:15:25.989Z"}
{"id":"7cde0550-daf4-11e7-abab-3773a17c06db","timestamp":"2017-12-07T02:15:25.989Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:15:25.997Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:15:25.998Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:15:25.998Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:15:25.998Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:15:26.000Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:15:26.000Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:15:26.000Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:15:26.002Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:15:26.002Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:15:26.002Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:15:26.002Z"}
[{"id":"7cde0550-daf4-11e7-abab-3773a17c06db","timestamp":"2017-12-07T02:15:25.989Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:15:26.004Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:15:26.004Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:15:26.004Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:15:26.004Z"}
[{"id":"7cde0550-daf4-11e7-abab-3773a17c06db","timestamp":"2017-12-07T02:15:25.989Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:18:33.845Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:18:33.845Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:18:33.845Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:18:33.845Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:18:33.845Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:18:33.845Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:18:33.882Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:18:33.895Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:18:33.896Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:18:33.896Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:18:33.897Z"}
{"id":"ecde5a80-daf4-11e7-ba91-63c20b277a05","timestamp":"2017-12-07T02:18:33.897Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:18:33.905Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:18:33.905Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:18:33.905Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:18:33.905Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:18:33.942Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:18:33.942Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:18:33.942Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:18:33.947Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:18:33.947Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:18:33.947Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:18:33.947Z"}
[{"id":"ecde5a80-daf4-11e7-ba91-63c20b277a05","timestamp":"2017-12-07T02:18:33.897Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:18:33.950Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:18:33.950Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  return;\n}","timestamp":"2017-12-07T02:18:33.950Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:18:33.950Z"}
[{"id":"ecde5a80-daf4-11e7-ba91-63c20b277a05","timestamp":"2017-12-07T02:18:33.897Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:21:01.556Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:21:01.556Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  return response.body.id;\n}","timestamp":"2017-12-07T02:21:01.556Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:21:01.556Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:21:01.557Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[30]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n  return response.body.id;\n}","timestamp":"2017-12-07T02:21:01.557Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:22:05.578Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"/api/books?id=undefined","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[34]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:22:05.579Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:22:05.622Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:22:05.669Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:22:05.670Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:22:05.670Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:22:05.671Z"}
{"id":"6b18a770-daf5-11e7-afda-17590faabaa2","timestamp":"2017-12-07T02:22:05.671Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:22:05.672Z"}
{"message":"Cannot read property 'id' of undefined","stack":"TypeError: Cannot read property 'id' of undefined\n    at Object.<anonymous>.router.post (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:44:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:22:05.672Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:22:05.681Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:22:05.681Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:22:05.681Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:22:05.681Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:22:05.683Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:22:05.684Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:22:05.684Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:22:05.685Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:22:05.685Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:22:05.686Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:22:05.686Z"}
[{"id":"6b18a770-daf5-11e7-afda-17590faabaa2","timestamp":"2017-12-07T02:22:05.671Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:22:05.688Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:22:05.688Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:22:05.688Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:22:05.688Z"}
[{"id":"6b18a770-daf5-11e7-afda-17590faabaa2","timestamp":"2017-12-07T02:22:05.671Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:23:28.930Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"/api/books?id=undefined","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[34]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:23:28.931Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:23:28.972Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:23:28.985Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:23:28.986Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:23:28.986Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:23:28.987Z"}
{"id":"9cc183a0-daf5-11e7-b72f-b72b018ab3ab","timestamp":"2017-12-07T02:23:28.987Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:23:28.987Z"}
{"message":"Cannot read property 'id' of undefined","stack":"TypeError: Cannot read property 'id' of undefined\n    at Object.<anonymous>.router.post (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:44:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:23:28.987Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:23:28.995Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:23:28.996Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:23:28.996Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:23:28.996Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:23:28.998Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:23:28.998Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:23:28.998Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:23:29.000Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:23:29.000Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:23:29.000Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:23:29.000Z"}
[{"id":"9cc183a0-daf5-11e7-b72f-b72b018ab3ab","timestamp":"2017-12-07T02:23:28.986Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:23:29.002Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:23:29.003Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:23:29.003Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:23:29.003Z"}
[{"id":"9cc183a0-daf5-11e7-b72f-b72b018ab3ab","timestamp":"2017-12-07T02:23:28.986Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:24:09.219Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:24:09.219Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:24:09.219Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:24:09.220Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:24:09.220Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:24:09.220Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:24:09.220Z"}
{"level":"info","message":"/api/books?id=undefined","timestamp":"2017-12-07T02:24:09.220Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[34]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:24:09.220Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:24:09.257Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:24:09.270Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:24:09.271Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:24:09.271Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:24:09.271Z"}
{"id":"b4c48470-daf5-11e7-8c70-cb249d478fb6","timestamp":"2017-12-07T02:24:09.271Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:24:09.272Z"}
{"message":"Cannot read property 'id' of undefined","stack":"TypeError: Cannot read property 'id' of undefined\n    at Object.<anonymous>.router.post (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:44:25)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:24:09.272Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:24:09.280Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:24:09.280Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book); /* istanbul ignore next */cov_3s4zhtb0l.s[28]++;\n  useId = response.body.id; /* istanbul ignore next */cov_3s4zhtb0l.s[29]++;\n  return useId;\n}","timestamp":"2017-12-07T02:24:09.280Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:24:09.280Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:24:09.283Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:24:09.283Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:24:09.283Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:24:09.285Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:24:09.285Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:24:09.285Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:24:09.285Z"}
[{"id":"b4c48470-daf5-11e7-8c70-cb249d478fb6","timestamp":"2017-12-07T02:24:09.271Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:24:09.287Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:24:09.288Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[31]++;\n  sendJSON(response, 200, books); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n  return useId;\n}","timestamp":"2017-12-07T02:24:09.288Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:24:09.288Z"}
[{"id":"b4c48470-daf5-11e7-8c70-cb249d478fb6","timestamp":"2017-12-07T02:24:09.271Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:25:25.566Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"/api/books?id=undefined","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n  sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:25.567Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:25:25.608Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:25.657Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:25.658Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:25:25.658Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:25:25.659Z"}
{"id":"e24c3fa0-daf5-11e7-be81-a5acb29b0e98","timestamp":"2017-12-07T02:25:25.659Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:25.668Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:25.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:25:25.668Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:25:25.668Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:25.670Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:25:25.671Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:25:25.671Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:25.673Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:25.673Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:25.673Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:25:25.673Z"}
{"message":"Cannot read property 'url' of undefined","stack":"TypeError: Cannot read property 'url' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:47:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:25:25.673Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:25.675Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:25.675Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:25.676Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:25:25.676Z"}
{"message":"Cannot read property 'url' of undefined","stack":"TypeError: Cannot read property 'url' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:47:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:25:25.676Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:25:48.798Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:25:48.799Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:25:48.799Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:25:48.799Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:25:48.799Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:48.799Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:25:48.841Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:48.886Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:48.887Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:25:48.887Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:25:48.887Z"}
{"id":"f024b670-daf5-11e7-8f4a-c5d519d159f8","timestamp":"2017-12-07T02:25:48.887Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:48.896Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:48.897Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:25:48.897Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:25:48.897Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:48.899Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:25:48.899Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:25:48.899Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:48.901Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:48.901Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:48.901Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:25:48.901Z"}
{"message":"Cannot read property 'url' of undefined","stack":"TypeError: Cannot read property 'url' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:47:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:25:48.901Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:25:48.903Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:25:48.904Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:25:48.904Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:25:48.904Z"}
{"message":"Cannot read property 'url' of undefined","stack":"TypeError: Cannot read property 'url' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:47:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:52:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:25:48.904Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:27:56.574Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:27:56.575Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:27:56.575Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:27:56.575Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:27:56.575Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:27:56.575Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:27:56.617Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:27:56.663Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:27:56.664Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:27:56.664Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:27:56.665Z"}
{"id":"3c4e1690-daf6-11e7-9aca-b9b3ae9e0b1e","timestamp":"2017-12-07T02:27:56.665Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:27:56.673Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:27:56.673Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:27:56.673Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:27:56.673Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:27:56.676Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:27:56.676Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:27:56.676Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:27:56.678Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:27:56.678Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:27:56.678Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:27:56.678Z"}
{"message":"Cannot read property 'url' of undefined","stack":"TypeError: Cannot read property 'url' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:47:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:27:56.678Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:27:56.680Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:27:56.680Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.query.url.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:27:56.680Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:27:56.680Z"}
{"message":"Cannot read property 'url' of undefined","stack":"TypeError: Cannot read property 'url' of undefined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:47:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T02:27:56.680Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:28:32.791Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:28:32.792Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:28:32.792Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:28:32.792Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:28:32.792Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:28:32.792Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:28:32.834Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:28:32.881Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:28:32.882Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:28:32.882Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:28:32.882Z"}
{"id":"51e45d20-daf6-11e7-9f1e-d704859a21e1","timestamp":"2017-12-07T02:28:32.882Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:28:32.891Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:28:32.891Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:28:32.891Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:28:32.892Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:28:32.894Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:28:32.894Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:28:32.894Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:28:32.896Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:28:32.896Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:28:32.896Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:28:32.897Z"}
[{"id":"51e45d20-daf6-11e7-9f1e-d704859a21e1","timestamp":"2017-12-07T02:28:32.882Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:28:32.899Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:28:32.899Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:28:32.899Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:28:32.900Z"}
[{"id":"51e45d20-daf6-11e7-9f1e-d704859a21e1","timestamp":"2017-12-07T02:28:32.882Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:29:49.117Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:29:49.118Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:29:49.118Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:29:49.118Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:29:49.118Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:29:49.118Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:29:49.160Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:29:49.206Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:29:49.207Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:29:49.207Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:29:49.208Z"}
{"id":"7f62c980-daf6-11e7-a40d-5554740f5f6e","timestamp":"2017-12-07T02:29:49.208Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:29:49.216Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:29:49.217Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:29:49.217Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:29:49.217Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:29:49.219Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:29:49.219Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:29:49.219Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:29:49.221Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:29:49.221Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:29:49.221Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:29:49.222Z"}
[{"id":"7f62c980-daf6-11e7-a40d-5554740f5f6e","timestamp":"2017-12-07T02:29:49.208Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:29:49.224Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:29:49.224Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.query.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:29:49.224Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:29:49.225Z"}
[{"id":"7f62c980-daf6-11e7-a40d-5554740f5f6e","timestamp":"2017-12-07T02:29:49.208Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:31:05.272Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:05.272Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:05.273Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:31:05.273Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:05.273Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:05.273Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:31:05.316Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:05.362Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:05.363Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:05.363Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:05.364Z"}
{"id":"acc74540-daf6-11e7-b88c-fb57cb6d06ec","timestamp":"2017-12-07T02:31:05.364Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:05.372Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:05.373Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:05.373Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:31:05.373Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:05.375Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:31:05.375Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:31:05.375Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:05.377Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:05.377Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:05.377Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:05.379Z"}
[{"id":"acc74540-daf6-11e7-b88c-fb57cb6d06ec","timestamp":"2017-12-07T02:31:05.364Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:05.381Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:05.381Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:05.381Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:05.382Z"}
[{"id":"acc74540-daf6-11e7-b88c-fb57cb6d06ec","timestamp":"2017-12-07T02:31:05.364Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:31:32.722Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:32.723Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:32.723Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:31:32.723Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:32.723Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:32.723Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:31:32.766Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:32.813Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:32.814Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:32.814Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:32.815Z"}
{"id":"bd23f5f0-daf6-11e7-bbc3-51993a2cb33e","timestamp":"2017-12-07T02:31:32.815Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:32.824Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:32.824Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:32.824Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:31:32.824Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:32.826Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:31:32.826Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:31:32.826Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:32.828Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:32.828Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:32.828Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:32.829Z"}
[{"id":"bd23f5f0-daf6-11e7-bbc3-51993a2cb33e","timestamp":"2017-12-07T02:31:32.815Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:32.831Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:32.832Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:32.832Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:32.832Z"}
[{"id":"bd23f5f0-daf6-11e7-bbc3-51993a2cb33e","timestamp":"2017-12-07T02:31:32.815Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:31:46.182Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:46.183Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:46.183Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:31:46.183Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:46.183Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:46.183Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:31:46.226Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:46.271Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:46.272Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:46.272Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:46.273Z"}
{"id":"c5297d10-daf6-11e7-a01e-9d9564428dd3","timestamp":"2017-12-07T02:31:46.273Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:46.282Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:46.282Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:46.283Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:31:46.283Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:46.285Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:31:46.285Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:31:46.285Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:46.287Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:46.287Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:46.287Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:46.288Z"}
[{"id":"c5297d10-daf6-11e7-a01e-9d9564428dd3","timestamp":"2017-12-07T02:31:46.273Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:46.290Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:46.290Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:46.291Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:46.291Z"}
[{"id":"c5297d10-daf6-11e7-a01e-9d9564428dd3","timestamp":"2017-12-07T02:31:46.273Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:31:59.559Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:59.559Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:59.559Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:31:59.559Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:31:59.559Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:59.559Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:31:59.602Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:59.614Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:59.615Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:59.615Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:59.616Z"}
{"id":"cd1d7800-daf6-11e7-896a-0f75f6eb6aaa","timestamp":"2017-12-07T02:31:59.616Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:59.624Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:59.624Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:31:59.624Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:31:59.624Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:59.626Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:31:59.626Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:31:59.626Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:59.628Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:59.628Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:59.628Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:59.630Z"}
[{"id":"cd1d7800-daf6-11e7-896a-0f75f6eb6aaa","timestamp":"2017-12-07T02:31:59.616Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:31:59.632Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:31:59.632Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url);\n  // if(request.url.id)\n  /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;sendJSON(response, 200, books);\n}","timestamp":"2017-12-07T02:31:59.633Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:31:59.633Z"}
[{"id":"cd1d7800-daf6-11e7-896a-0f75f6eb6aaa","timestamp":"2017-12-07T02:31:59.616Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:40:49.171Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:40:49.172Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:40:49.172Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:40:49.172Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:40:49.172Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T02:40:49.172Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:40:49.215Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:40:49.259Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:40:49.260Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:40:49.260Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:40:49.260Z"}
{"id":"08cebac0-daf8-11e7-8b61-33240c2f081f","timestamp":"2017-12-07T02:40:49.260Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:40:49.269Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:40:49.269Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:40:49.269Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:40:49.270Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:40:49.272Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:40:49.272Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:40:49.272Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:40:49.274Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:40:49.274Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T02:40:49.274Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:40:49.275Z"}
[{"id":"08cebac0-daf8-11e7-8b61-33240c2f081f","timestamp":"2017-12-07T02:40:49.260Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:40:49.277Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:40:49.277Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log(request.url.query.id); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T02:40:49.277Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:40:49.277Z"}
{"id":"08cebac0-daf8-11e7-8b61-33240c2f081f","timestamp":"2017-12-07T02:40:49.277Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T02:42:15.107Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:42:15.108Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:42:15.108Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T02:42:15.108Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T02:42:15.108Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log('query:', request.url.query.id); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T02:42:15.108Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T02:42:15.146Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:42:15.192Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:42:15.194Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:42:15.194Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:42:15.194Z"}
{"id":"3c0737a0-daf8-11e7-a5b3-4b0e7bce3f6b","timestamp":"2017-12-07T02:42:15.194Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:42:15.203Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:42:15.203Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T02:42:15.203Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T02:42:15.203Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:42:15.206Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T02:42:15.206Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T02:42:15.206Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:42:15.208Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:42:15.208Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log('query:', request.url.query.id); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T02:42:15.208Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:42:15.208Z"}
[{"id":"3c0737a0-daf8-11e7-a5b3-4b0e7bce3f6b","timestamp":"2017-12-07T02:42:15.194Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T02:42:15.210Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T02:42:15.210Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  console.log('query:', request.url.query.id); /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T02:42:15.210Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T02:42:15.211Z"}
{"id":"3c0737a0-daf8-11e7-a5b3-4b0e7bce3f6b","timestamp":"2017-12-07T02:42:15.211Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:00:00.020Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:00:00.021Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:00:00.021Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:00:00.021Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:00:00.021Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[34]++;\n      if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n        sendStatus(response, 404, 'Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:00.021Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:00:00.058Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:00.105Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:00.106Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:00:00.106Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:00.106Z"}
{"id":"b6c3e4a0-dafa-11e7-8f01-a1f11275fb89","timestamp":"2017-12-07T03:00:00.106Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:00.116Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:00.116Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:00:00.117Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T03:00:00.117Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:00.119Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:00:00.119Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T03:00:00.119Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:00.121Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:00.121Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[34]++;\n      if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n        sendStatus(response, 404, 'Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:00.121Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:00.121Z"}
[{"id":"b6c3e4a0-dafa-11e7-8f01-a1f11275fb89","timestamp":"2017-12-07T03:00:00.106Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:00.123Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:00.124Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[34]++;\n      if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n        sendStatus(response, 404, 'Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:00.124Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:00.124Z"}
{"id":"b6c3e4a0-dafa-11e7-8f01-a1f11275fb89","timestamp":"2017-12-07T03:00:00.124Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:00.125Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:00.126Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[34]++;\n      if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n        sendStatus(response, 404, 'Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:00.126Z"}
{"level":"info","message":"Responding with a 404 code due to Not Found","timestamp":"2017-12-07T03:00:00.126Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:00.126Z"}
{"level":"info","message":"","timestamp":"2017-12-07T03:00:00.126Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:00:56.431Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:00:56.432Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:00:56.432Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:00:56.432Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:00:56.432Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:56.432Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:00:56.476Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:56.520Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:56.521Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:00:56.521Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:56.522Z"}
{"id":"d8644aa0-dafa-11e7-8837-f7924370307d","timestamp":"2017-12-07T03:00:56.522Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:56.530Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:56.531Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:00:56.531Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T03:00:56.531Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:56.533Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:00:56.533Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T03:00:56.533Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:56.535Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:56.535Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:56.535Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:56.535Z"}
[{"id":"d8644aa0-dafa-11e7-8837-f7924370307d","timestamp":"2017-12-07T03:00:56.522Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:56.537Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:56.538Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:56.538Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:00:56.538Z"}
{"id":"d8644aa0-dafa-11e7-8837-f7924370307d","timestamp":"2017-12-07T03:00:56.538Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:00:56.539Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:00:56.540Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:00:56.540Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T03:00:56.540Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:10:46.372Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:10:46.373Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:10:46.373Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:10:46.373Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:10:46.373Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:10:46.373Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:10:46.409Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.423Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:10:46.424Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:10:46.424Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:10:46.424Z"}
{"id":"38003180-dafc-11e7-b834-c5558eeb1c9e","timestamp":"2017-12-07T03:10:46.424Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.433Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:10:46.433Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:10:46.433Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T03:10:46.433Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.435Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:10:46.436Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T03:10:46.436Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.437Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:10:46.437Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:10:46.438Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:10:46.438Z"}
[{"id":"38003180-dafc-11e7-b834-c5558eeb1c9e","timestamp":"2017-12-07T03:10:46.424Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.439Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:10:46.440Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:10:46.440Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:10:46.440Z"}
{"id":"38003180-dafc-11e7-b834-c5558eeb1c9e","timestamp":"2017-12-07T03:10:46.440Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.442Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:10:46.442Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:10:46.442Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T03:10:46.442Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:10:46.443Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:10:46.443Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:10:46.443Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:48:37)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T03:10:46.444Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:30:06.168Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:30:06.169Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:30:06.207Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.254Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.255Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:30:06.255Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:30:06.255Z"}
{"id":"eb505bf0-dafe-11e7-91bb-0d75c826201a","timestamp":"2017-12-07T03:30:06.255Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.264Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.264Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:30:06.264Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T03:30:06.264Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.266Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:30:06.267Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T03:30:06.267Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.268Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.268Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:30:06.269Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:30:06.269Z"}
[{"id":"eb505bf0-dafe-11e7-91bb-0d75c826201a","timestamp":"2017-12-07T03:30:06.255Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.271Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.271Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:30:06.271Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:30:06.271Z"}
{"id":"eb505bf0-dafe-11e7-91bb-0d75c826201a","timestamp":"2017-12-07T03:30:06.271Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.273Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.273Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:30:06.273Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T03:30:06.273Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.275Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.275Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:30:06.275Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T03:30:06.275Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.276Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.276Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:30:06.276Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T03:30:06.277Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:30:06.278Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:30:06.278Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:30:06.278Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T03:30:06.278Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:32:00.347Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:32:00.347Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:32:00.347Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:32:00.347Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:32:00.347Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:32:00.347Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T03:32:00.348Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:32:00.348Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:32:00.348Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:32:00.385Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.430Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.431Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:32:00.431Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:32:00.432Z"}
{"id":"2f5e6300-daff-11e7-820f-ed802b79c75f","timestamp":"2017-12-07T03:32:00.432Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.440Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.441Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:32:00.441Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T03:32:00.441Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.443Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:32:00.443Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T03:32:00.443Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.445Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.445Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:32:00.445Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:32:00.445Z"}
[{"id":"2f5e6300-daff-11e7-820f-ed802b79c75f","timestamp":"2017-12-07T03:32:00.432Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.447Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.448Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:32:00.448Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:32:00.448Z"}
{"id":"2f5e6300-daff-11e7-820f-ed802b79c75f","timestamp":"2017-12-07T03:32:00.448Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.449Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.449Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:32:00.450Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T03:32:00.450Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.451Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.451Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:32:00.451Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T03:32:00.451Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.453Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.453Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:32:00.453Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T03:32:00.453Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:32:00.454Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:32:00.454Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:32:00.454Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T03:32:00.454Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:35:43.830Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:35:43.830Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:35:43.830Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:35:43.830Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:35:43.831Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let designatedBook;\n    books.forEach((book) => {\n      if(request.url.query.id === book['id']) {\n        designatedBook = book;\n        return;\n      }\n    });\n    if(!designatedBook) {\n      sendStatus(response, 404, 'ID Not Found');\n      return;\n    }\n    sendJSON(response, 200, designatedBook);\n  } else {\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:35:43.831Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T03:35:43.831Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:35:43.831Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {\n    sendStatus(response, 400, 'ID Not Provided');\n    return;\n  }\n  let designatedBook;\n  let bookIndex;\n  books.forEach((book, index) => {\n    if(request.url.query.id === books[index]['id']) {\n      designatedBook = books[index];\n      bookIndex = index;\n      return;\n    }\n  });\n  if(!designatedBook) {\n    sendStatus(response, 404, 'Invalid ID');\n    return;\n  } else {\n    books.splice(bookIndex, 1);\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:35:43.831Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:35:43.838Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:35:51.889Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:35:51.890Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:35:51.890Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:48:39)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T03:35:51.890Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:47:09.870Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:47:09.871Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:47:09.871Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:47:09.871Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:47:09.871Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let designatedBook;\n    books.forEach((book) => {\n      if(request.url.query.id === book['id']) {\n        designatedBook = book;\n        return;\n      }\n    });\n    if(!designatedBook) {\n      sendStatus(response, 404, 'ID Not Found');\n      return;\n    }\n    sendJSON(response, 200, designatedBook);\n  } else {\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:47:09.872Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T03:47:09.872Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:47:09.872Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {\n    sendStatus(response, 400, 'ID Not Provided');\n    return;\n  }\n  let designatedBook;\n  let bookIndex;\n  books.forEach((book, index) => {\n    if(request.url.query.id === books[index]['id']) {\n      designatedBook = books[index];\n      bookIndex = index;\n      return;\n    }\n  });\n  if(!designatedBook) {\n    sendStatus(response, 404, 'Invalid ID');\n    return;\n  } else {\n    books.splice(bookIndex, 1);\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:47:09.872Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:47:09.878Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T03:47:19.857Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:47:19.858Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T03:47:19.900Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.914Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.915Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:47:19.915Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:47:19.915Z"}
{"id":"536c5bb0-db01-11e7-8b23-dd33776461c4","timestamp":"2017-12-07T03:47:19.915Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.924Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.924Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T03:47:19.924Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T03:47:19.924Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.926Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T03:47:19.927Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T03:47:19.927Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.929Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.929Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:47:19.929Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:47:19.929Z"}
[{"id":"536c5bb0-db01-11e7-8b23-dd33776461c4","timestamp":"2017-12-07T03:47:19.915Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.931Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.931Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:47:19.931Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T03:47:19.931Z"}
{"id":"536c5bb0-db01-11e7-8b23-dd33776461c4","timestamp":"2017-12-07T03:47:19.931Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.933Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.933Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T03:47:19.933Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T03:47:19.933Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.935Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.935Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:47:19.935Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T03:47:19.935Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.937Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.937Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:47:19.937Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T03:47:19.937Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T03:47:19.938Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T03:47:19.938Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T03:47:19.938Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T03:47:19.939Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T04:16:29.204Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T04:16:29.204Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T04:16:29.204Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T04:16:29.204Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T04:16:29.204Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T04:16:29.204Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T04:16:29.205Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T04:16:29.205Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T04:16:29.205Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T04:16:29.246Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.261Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.262Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T04:16:29.262Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T04:16:29.263Z"}
{"id":"661d86e0-db05-11e7-a210-6da4d3ba2e83","timestamp":"2017-12-07T04:16:29.263Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.270Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.271Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T04:16:29.271Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T04:16:29.271Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.273Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T04:16:29.273Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T04:16:29.273Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.275Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.275Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T04:16:29.275Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T04:16:29.275Z"}
[{"id":"661d86e0-db05-11e7-a210-6da4d3ba2e83","timestamp":"2017-12-07T04:16:29.263Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.278Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.278Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T04:16:29.278Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T04:16:29.278Z"}
{"id":"661d86e0-db05-11e7-a210-6da4d3ba2e83","timestamp":"2017-12-07T04:16:29.278Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.280Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.280Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T04:16:29.281Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T04:16:29.281Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.282Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.282Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T04:16:29.282Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T04:16:29.283Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.285Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.285Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T04:16:29.285Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T04:16:29.285Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:16:29.287Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:16:29.287Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T04:16:29.287Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T04:16:29.287Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T04:21:45.028Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let designatedBook;\n    books.forEach((book) => {\n      if(request.url.query.id === book['id']) {\n        designatedBook = book;\n        return;\n      }\n    });\n    if(!designatedBook) {\n      sendStatus(response, 404, 'ID Not Found');\n      return;\n    }\n    sendJSON(response, 200, designatedBook);\n  } else {\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {\n    sendStatus(response, 400, 'ID Not Provided');\n    return;\n  }\n  let designatedBook;\n  let bookIndex;\n  books.forEach((book, index) => {\n    if(request.url.query.id === books[index]['id']) {\n      designatedBook = books[index];\n      bookIndex = index;\n      return;\n    }\n  });\n  if(!designatedBook) {\n    sendStatus(response, 404, 'Invalid ID');\n    return;\n  } else {\n    books.splice(bookIndex, 1);\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T04:21:45.029Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T04:21:45.037Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:21:49.201Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:21:49.203Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T04:21:49.203Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T04:21:49.203Z"}
{"id":"24d0a630-db06-11e7-a4fc-6d30d8b88fe8","timestamp":"2017-12-07T04:21:49.203Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:38:25.194Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let designatedBook;\n    books.forEach((book) => {\n      if(request.url.query.id === book['id']) {\n        designatedBook = book;\n        return;\n      }\n    });\n    if(!designatedBook) {\n      sendStatus(response, 404, 'ID Not Found');\n      return;\n    }\n    sendJSON(response, 200, designatedBook);\n  } else {\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {\n    sendStatus(response, 400, 'ID Not Provided');\n    return;\n  }\n  let designatedBook;\n  let bookIndex;\n  books.forEach((book, index) => {\n    if(request.url.query.id === books[index]['id']) {\n      designatedBook = books[index];\n      bookIndex = index;\n      return;\n    }\n  });\n  if(!designatedBook) {\n    sendStatus(response, 404, 'Invalid ID');\n    return;\n  } else {\n    books.splice(bookIndex, 1);\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:38:25.195Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:38:25.202Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:38:28.646Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:38:28.648Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:38:28.648Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:38:28.648Z"}
{"id":"da4c4280-db10-11e7-9aa6-cd4358c1c5ce","timestamp":"2017-12-07T05:38:28.648Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:43:58.126Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:43:58.127Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:43:58.167Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.180Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.181Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:43:58.181Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:43:58.181Z"}
{"id":"9eb70150-db11-11e7-8fda-7ff7bfa1da4e","timestamp":"2017-12-07T05:43:58.181Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.190Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.190Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:43:58.190Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T05:43:58.191Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.193Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T05:43:58.193Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T05:43:58.193Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.195Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.195Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:43:58.195Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:43:58.195Z"}
[{"id":"9eb70150-db11-11e7-8fda-7ff7bfa1da4e","timestamp":"2017-12-07T05:43:58.181Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.197Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.198Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:43:58.198Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:43:58.198Z"}
{"id":"9eb70150-db11-11e7-8fda-7ff7bfa1da4e","timestamp":"2017-12-07T05:43:58.198Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.200Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.200Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:43:58.200Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T05:43:58.200Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.201Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.202Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:43:58.202Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T05:43:58.202Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.203Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.204Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:43:58.204Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T05:43:58.204Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:43:58.205Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:43:58.205Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:43:58.205Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T05:43:58.205Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:45:41.068Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:45:41.069Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:45:41.114Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.127Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.128Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:45:41.128Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:45:41.128Z"}
{"id":"dc137880-db11-11e7-b7d1-d730a1a56144","timestamp":"2017-12-07T05:45:41.128Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.137Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.137Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T05:45:41.137Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T05:45:41.137Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.139Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T05:45:41.139Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T05:45:41.139Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.141Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.141Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:45:41.141Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:45:41.141Z"}
[{"id":"dc137880-db11-11e7-b7d1-d730a1a56144","timestamp":"2017-12-07T05:45:41.128Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.143Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.144Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:45:41.144Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T05:45:41.144Z"}
{"id":"dc137880-db11-11e7-b7d1-d730a1a56144","timestamp":"2017-12-07T05:45:41.144Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.146Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.146Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T05:45:41.146Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T05:45:41.146Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.148Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.148Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:45:41.148Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T05:45:41.148Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.150Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.150Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:45:41.150Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T05:45:41.150Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:45:41.151Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:45:41.151Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T05:45:41.151Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T05:45:41.151Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:04:36.809Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let designatedBook;\n    books.forEach((book) => {\n      if(request.url.query.id === book['id']) {\n        designatedBook = book;\n        return;\n      }\n    });\n    if(!designatedBook) {\n      sendStatus(response, 404, 'ID Not Found');\n      return;\n    }\n    sendJSON(response, 200, designatedBook);\n  } else {\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {\n    sendStatus(response, 400, 'ID Not Provided');\n    return;\n  }\n  let designatedBook;\n  let bookIndex;\n  books.forEach((book, index) => {\n    if(request.url.query.id === books[index]['id']) {\n      designatedBook = books[index];\n      bookIndex = index;\n      return;\n    }\n  });\n  if(!designatedBook) {\n    sendStatus(response, 404, 'Invalid ID');\n    return;\n  } else {\n    books.splice(bookIndex, 1);\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T06:04:36.810Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:04:36.818Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:04:46.836Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:04:46.836Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T06:04:46.837Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:04:46.880Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.893Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.894Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T06:04:46.894Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T06:04:46.894Z"}
{"id":"87017ce0-db14-11e7-ae41-5ba81fc5f131","timestamp":"2017-12-07T06:04:46.894Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.904Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.905Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T06:04:46.905Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T06:04:46.905Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.907Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T06:04:46.907Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T06:04:46.907Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.909Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.909Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T06:04:46.910Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T06:04:46.910Z"}
[{"id":"87017ce0-db14-11e7-ae41-5ba81fc5f131","timestamp":"2017-12-07T06:04:46.894Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.912Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.912Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T06:04:46.912Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T06:04:46.912Z"}
{"id":"87017ce0-db14-11e7-ae41-5ba81fc5f131","timestamp":"2017-12-07T06:04:46.912Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.914Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.914Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T06:04:46.914Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T06:04:46.914Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.916Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.916Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T06:04:46.916Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T06:04:46.916Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.917Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.917Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T06:04:46.917Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T06:04:46.918Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:04:46.919Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:04:46.919Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T06:04:46.919Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T06:04:46.919Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:32:59.548Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let designatedBook;\n    books.forEach((book) => {\n      if(request.url.query.id === book['id']) {\n        designatedBook = book;\n        return;\n      }\n    });\n    if(!designatedBook) {\n      sendStatus(response, 404, 'ID Not Found');\n      return;\n    }\n    sendJSON(response, 200, designatedBook);\n  } else {\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {\n    sendStatus(response, 400, 'ID Not Provided');\n    return;\n  }\n  let designatedBook;\n  let bookIndex;\n  books.forEach((book, index) => {\n    if(request.url.query.id === books[index]['id']) {\n      designatedBook = books[index];\n      bookIndex = index;\n      return;\n    }\n  });\n  if(!designatedBook) {\n    sendStatus(response, 404, 'Invalid ID');\n    return;\n  } else {\n    books.splice(bookIndex, 1);\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T06:32:59.549Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:32:59.556Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:33:10.234Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:33:10.236Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.title){\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n  if(!request.body.author){\n    sendStatus(response, 400, 'author not found');\n    return;\n  }\n  let book = new Book(request.body.title, request.body.author);\n  books.push(book);\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T06:33:10.236Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T06:33:10.236Z"}
{"id":"7e46d9c0-db18-11e7-847e-0dd2dc55edbe","timestamp":"2017-12-07T06:33:10.236Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T22:12:28.131Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:12:28.132Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T22:12:28.192Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.206Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.207Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:12:28.207Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:12:28.208Z"}
{"id":"b63eeb00-db9b-11e7-a1cf-1fe0a6ef7815","timestamp":"2017-12-07T22:12:28.208Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.216Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.216Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:12:28.216Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T22:12:28.216Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.218Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T22:12:28.218Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T22:12:28.218Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.220Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.220Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:12:28.220Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:12:28.220Z"}
[{"id":"b63eeb00-db9b-11e7-a1cf-1fe0a6ef7815","timestamp":"2017-12-07T22:12:28.208Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.222Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.223Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:12:28.223Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:12:28.223Z"}
{"id":"b63eeb00-db9b-11e7-a1cf-1fe0a6ef7815","timestamp":"2017-12-07T22:12:28.223Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.224Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.225Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:12:28.225Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T22:12:28.225Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.226Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.226Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:12:28.226Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T22:12:28.226Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.228Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.228Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:12:28.228Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T22:12:28.228Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:12:28.229Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:12:28.230Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:12:28.230Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T22:12:28.230Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T22:27:37.667Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:27:37.668Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T22:27:37.710Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.722Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.723Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:27:37.723Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:27:37.724Z"}
{"id":"d45c0bc0-db9d-11e7-85a5-175be17fea66","timestamp":"2017-12-07T22:27:37.724Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.731Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.732Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:27:37.732Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T22:27:37.732Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.734Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T22:27:37.734Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T22:27:37.734Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.736Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.736Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:27:37.736Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:27:37.736Z"}
[{"id":"d45c0bc0-db9d-11e7-85a5-175be17fea66","timestamp":"2017-12-07T22:27:37.724Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.738Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.738Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:27:37.738Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:27:37.738Z"}
{"id":"d45c0bc0-db9d-11e7-85a5-175be17fea66","timestamp":"2017-12-07T22:27:37.738Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.740Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.740Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:27:37.740Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T22:27:37.740Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.742Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.742Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:27:37.742Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T22:27:37.742Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.743Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.743Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:27:37.743Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T22:27:37.744Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:27:37.745Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:27:37.745Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:27:37.745Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T22:27:37.745Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T22:48:54.162Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:48:54.162Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:48:54.162Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T22:48:54.163Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:48:54.163Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:48:54.163Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T22:48:54.163Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T22:48:54.163Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:48:54.163Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T22:48:54.205Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.217Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.218Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:48:54.218Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:48:54.218Z"}
{"id":"cd3592a0-dba0-11e7-99d8-e3dbcd90dd0b","timestamp":"2017-12-07T22:48:54.219Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.226Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.227Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  books.push(book); /* istanbul ignore next */cov_3s4zhtb0l.s[27]++;\n  sendJSON(response, 200, book);\n}","timestamp":"2017-12-07T22:48:54.227Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T22:48:54.227Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.229Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T22:48:54.229Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T22:48:54.229Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.231Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.231Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:48:54.231Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:48:54.231Z"}
[{"id":"cd3592a0-dba0-11e7-99d8-e3dbcd90dd0b","timestamp":"2017-12-07T22:48:54.218Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.233Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.233Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:48:54.233Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T22:48:54.233Z"}
{"id":"cd3592a0-dba0-11e7-99d8-e3dbcd90dd0b","timestamp":"2017-12-07T22:48:54.233Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.235Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.235Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[29]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[30]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[31]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[32]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[33]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T22:48:54.235Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T22:48:54.235Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.237Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.237Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:48:54.237Z"}
{"level":"info","message":"Responding with a 204 code due to Book was successfully deleted","timestamp":"2017-12-07T22:48:54.237Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.239Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.239Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:48:54.239Z"}
{"level":"info","message":"Responding with a 404 code due to Invalid ID","timestamp":"2017-12-07T22:48:54.239Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T22:48:54.240Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T22:48:54.240Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T22:48:54.240Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T22:48:54.240Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T23:05:06.936Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author));\n  // books.push(book);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:05:06.937Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T23:05:06.976Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.019Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.020Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author));\n  // books.push(book);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:05:07.020Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:05:07.024Z"}
{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.024Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.032Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.032Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author));\n  // books.push(book);\n  /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:05:07.032Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T23:05:07.032Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.034Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:05:07.035Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:05:07.035Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.036Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.037Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T23:05:07.037Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:05:07.037Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:67:29)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:05:07.037Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.039Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.039Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T23:05:07.039Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:05:07.039Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:55:5)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:05:07.039Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.041Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.041Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, books);\n  }\n}","timestamp":"2017-12-07T23:05:07.041Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:05:07.041Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:55:5)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:05:07.041Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.044Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.044Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:05:07.044Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:05:07.044Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:78:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:05:07.044Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.045Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.045Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:05:07.045Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:05:07.045Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:78:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:05:07.046Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:05:07.047Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:05:07.047Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:05:07.047Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T23:05:07.047Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T23:31:07.489Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:31:07.489Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:31:07.489Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T23:31:07.489Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:31:07.489Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(book); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[33]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[34]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[37]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[38]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[40]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[42]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:31:07.490Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T23:31:07.490Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:31:07.490Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[48]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[55]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[56]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:31:07.490Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T23:31:07.524Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.570Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.571Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:31:07.572Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:31:07.574Z"}
{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.575Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.582Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.583Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:31:07.583Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T23:31:07.583Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.585Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:31:07.585Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:31:07.585Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.587Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.587Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(book); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[33]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[34]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[37]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[38]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[40]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[42]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:31:07.587Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:31:07.588Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.590Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.590Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(book); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[33]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[34]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[37]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[38]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[40]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[42]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:31:07.590Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:31:07.590Z"}
{"message":"book is not defined","stack":"ReferenceError: book is not defined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:52:23)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:31:07.590Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.592Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.592Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(book); /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;\n    books.forEach(book => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[33]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[34]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n    if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[37]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[38]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[40]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[41]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[42]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:31:07.592Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:31:07.592Z"}
{"message":"book is not defined","stack":"ReferenceError: book is not defined\n    at Object.<anonymous>.router.get (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:52:23)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:31:07.592Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.595Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.595Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[48]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[55]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[56]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:31:07.595Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:31:07.595Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:82:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:31:07.595Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.597Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.597Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[48]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[55]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[56]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:31:07.597Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:31:07.597Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:82:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:31:07.597Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:31:07.598Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:31:07.599Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[48]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[55]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[56]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:31:07.599Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T23:31:07.599Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T23:45:38.071Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:45:38.071Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem().\n    then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[40]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[41]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[43]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[44]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[47]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[48]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[54]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[55]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:45:38.072Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T23:45:38.108Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.156Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.158Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:45:38.158Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:45:38.161Z"}
{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.161Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.169Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.169Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:45:38.169Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T23:45:38.169Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.171Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:45:38.172Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:45:38.172Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.173Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.173Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem().\n    then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[40]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[41]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:45:38.174Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:45:38.174Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.176Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.177Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem().\n    then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[40]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[41]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:45:38.177Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:45:38.177Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.179Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.179Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem().\n    then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      if (request.url.query.id === book['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n        designatedBook = book; /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[35]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}cov_3s4zhtb0l.s[38]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[39]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[40]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[41]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:45:38.180Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:45:38.180Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.180Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.180Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[43]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[44]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[47]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[48]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[54]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[55]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:45:38.180Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:45:38.181Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:45:38.181Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.182Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.183Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[43]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[44]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[47]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[48]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[54]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[55]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:45:38.183Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:45:38.183Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:45:38.183Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:45:38.184Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:45:38.185Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[43]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[44]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[47]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[48]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[7][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[8][0]++;cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[8][1]++;cov_3s4zhtb0l.s[54]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[55]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:45:38.185Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T23:45:38.185Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T23:49:25.856Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:49:25.856Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:49:25.856Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T23:49:25.857Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:49:25.857Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:49:25.857Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T23:49:25.857Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:49:25.857Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:49:25.857Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T23:49:25.898Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.947Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.948Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:49:25.948Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:49:25.952Z"}
{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.952Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.962Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.963Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:49:25.963Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T23:49:25.963Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.966Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:49:25.966Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:49:25.966Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.968Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.968Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:49:25.968Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:49:25.969Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.972Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.973Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:49:25.973Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:49:25.973Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.976Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.976Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:49:25.976Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:49:25.976Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.980Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.980Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:49:25.980Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:49:25.981Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:49:25.981Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.982Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.982Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:49:25.982Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:49:25.982Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:49:25.982Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:49:25.985Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:25.985Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:49:25.985Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T23:49:25.985Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T23:53:41.726Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:53:41.727Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T23:53:41.767Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.816Z"}
{"level":"debug","message":"Original URL: \"/api/books\"","timestamp":"2017-12-07T23:53:41.816Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":null,\"query\":{},\"pathname\":\"/api/books\",\"path\":\"/api/books\",\"href\":\"/api/books\"}","timestamp":"2017-12-07T23:53:41.816Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.817Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:53:41.817Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-07T23:53:41.818Z"}
{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:53:41.818Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:53:41.821Z"}
{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.821Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.831Z"}
{"level":"debug","message":"Original URL: \"/api/books\"","timestamp":"2017-12-07T23:53:41.831Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":null,\"query\":{},\"pathname\":\"/api/books\",\"path\":\"/api/books\",\"href\":\"/api/books\"}","timestamp":"2017-12-07T23:53:41.831Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.831Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:53:41.832Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T23:53:41.832Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.834Z"}
{"level":"debug","message":"Original URL: \"/api/books\"","timestamp":"2017-12-07T23:53:41.835Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":null,\"query\":{},\"pathname\":\"/api/books\",\"path\":\"/api/books\",\"href\":\"/api/books\"}","timestamp":"2017-12-07T23:53:41.835Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:53:41.835Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:53:41.835Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.837Z"}
{"level":"debug","message":"Original URL: \"/api/books\"","timestamp":"2017-12-07T23:53:41.838Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":null,\"query\":{},\"pathname\":\"/api/books\",\"path\":\"/api/books\",\"href\":\"/api/books\"}","timestamp":"2017-12-07T23:53:41.838Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.838Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:53:41.838Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:53:41.838Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:53:41.838Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.841Z"}
{"level":"debug","message":"Original URL: \"/api/books?id=da661a90-dba9-11e7-b6eb-ef775b42d169\"","timestamp":"2017-12-07T23:53:41.842Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":\"?id=da661a90-dba9-11e7-b6eb-ef775b42d169\",\"query\":{\"id\":\"da661a90-dba9-11e7-b6eb-ef775b42d169\"},\"pathname\":\"/api/books\",\"path\":\"/api/books?id=da661a90-dba9-11e7-b6eb-ef775b42d169\",\"href\":\"/api/books?id=da661a90-dba9-11e7-b6eb-ef775b42d169\"}","timestamp":"2017-12-07T23:53:41.842Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.842Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:53:41.842Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.843Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:53:41.843Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:53:41.843Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"debug","message":"Original URL: \"/api/books?id=invalid\"","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":\"?id=invalid\",\"query\":{\"id\":\"invalid\"},\"pathname\":\"/api/books\",\"path\":\"/api/books?id=invalid\",\"href\":\"/api/books?id=invalid\"}","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id);\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[32]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[35]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[36]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[37]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[38]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:53:41.846Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.850Z"}
{"level":"debug","message":"Original URL: \"/api/books?id=da661a90-dba9-11e7-b6eb-ef775b42d169\"","timestamp":"2017-12-07T23:53:41.850Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":\"?id=da661a90-dba9-11e7-b6eb-ef775b42d169\",\"query\":{\"id\":\"da661a90-dba9-11e7-b6eb-ef775b42d169\"},\"pathname\":\"/api/books\",\"path\":\"/api/books?id=da661a90-dba9-11e7-b6eb-ef775b42d169\",\"href\":\"/api/books?id=da661a90-dba9-11e7-b6eb-ef775b42d169\"}","timestamp":"2017-12-07T23:53:41.850Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.850Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:53:41.850Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:53:41.850Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:53:41.850Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.851Z"}
{"level":"debug","message":"Original URL: \"/api/books?id=invalid\"","timestamp":"2017-12-07T23:53:41.851Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":\"?id=invalid\",\"query\":{\"id\":\"invalid\"},\"pathname\":\"/api/books\",\"path\":\"/api/books?id=invalid\",\"href\":\"/api/books?id=invalid\"}","timestamp":"2017-12-07T23:53:41.852Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.852Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:53:41.852Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:53:41.852Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:53:41.852Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:53:41.857Z"}
{"level":"debug","message":"Original URL: \"/api/books\"","timestamp":"2017-12-07T23:53:41.857Z"}
{"level":"debug","message":"Parsed URL: {\"protocol\":null,\"slashes\":null,\"auth\":null,\"host\":null,\"port\":null,\"hostname\":null,\"hash\":null,\"search\":null,\"query\":{},\"pathname\":\"/api/books\",\"path\":\"/api/books\",\"href\":\"/api/books\"}","timestamp":"2017-12-07T23:53:41.857Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:53:41.858Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[40]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[41]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[42]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[44]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[45]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[49]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[51]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:53:41.858Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T23:53:41.858Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T23:58:25.117Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:58:25.117Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:58:25.117Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T23:58:25.117Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:58:25.117Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:58:25.117Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T23:58:25.118Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-07T23:58:25.118Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:58:25.118Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T23:58:25.166Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.215Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.216Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:58:25.216Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-07T23:58:25.217Z"}
{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:58:25.217Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:58:25.220Z"}
{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.220Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.228Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.229Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:58:25.229Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-07T23:58:25.229Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.231Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:58:25.231Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:58:25.231Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.233Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.233Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:58:25.233Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:58:25.234Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:58:25.234Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.236Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.237Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:58:25.237Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.237Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:58:25.237Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:58:25.237Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-07T23:58:25.239Z"}
{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.239Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.241Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.241Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // .then(() => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-07T23:58:25.241Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-07T23:58:25.241Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-07T23:58:25.241Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-07T23:58:25.241Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.242Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.242Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:58:25.242Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:58:25.242Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:94:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:58:25.242Z"}
{"level":"info","message":"Responding with a 500 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-07T23:58:25.244Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.245Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.245Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:58:25.245Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T23:58:25.245Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:94:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:58:25.245Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T23:58:25.248Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:58:25.249Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-07T23:58:25.249Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-07T23:58:25.249Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:01:39.289Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:01:39.290Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:01:39.331Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.379Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.381Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:01:39.381Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:01:39.381Z"}
{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:01:39.381Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:01:39.384Z"}
{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.384Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.394Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.394Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:01:39.394Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:01:39.394Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.397Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:01:39.398Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:01:39.398Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.400Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.400Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:01:39.400Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:01:39.401Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:01:39.401Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.404Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.404Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:01:39.404Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.404Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:01:39.404Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-08T00:01:39.404Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:01:39.406Z"}
{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.406Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.408Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.408Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;\n    let designatedBook; /* istanbul ignore next */cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[37]++;\n    sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[38]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[39]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[40]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:01:39.408Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:01:39.408Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:01:39.408Z"}
{"level":"info","message":"Responding with a 404 code due to ID Not Found","timestamp":"2017-12-08T00:01:39.409Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.410Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.410Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:01:39.410Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:01:39.410Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:01:39.410Z"}
{"level":"info","message":"Responding with a 500 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:01:39.412Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.412Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.413Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:01:39.413Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:01:39.413Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:01:39.413Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:01:39.416Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:01:39.416Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[42]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[46]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[51]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[52]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[53]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[54]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:01:39.416Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:01:39.416Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:02:55.207Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    // let designatedBook;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n    // sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:02:55.208Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:02:55.248Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.298Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.299Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:02:55.299Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:02:55.300Z"}
{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.300Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:02:55.300Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:02:55.302Z"}
{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.302Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.311Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.311Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:02:55.311Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:02:55.312Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.314Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:02:55.314Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:02:55.314Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.316Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.316Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    // let designatedBook;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n    // sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:02:55.316Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:02:55.317Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:02:55.317Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.320Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.320Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    // let designatedBook;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n    // sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:02:55.320Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.320Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:02:55.320Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:02:55.321Z"}
{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.321Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.323Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.323Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    // let designatedBook;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    });\n    // books.forEach((book) => {\n    //   if(request.url.query.id === book['id']) {\n    //     designatedBook = book;\n    //     return;\n    //   }\n    // });\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n    // sendJSON(response, 200, designatedBook);\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:02:55.323Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:02:55.323Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:02:55.323Z"}
{"level":"info","message":"Responding with a 500 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:02:55.323Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.326Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.326Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:02:55.326Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:02:55.327Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:02:55.327Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.329Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.329Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:02:55.329Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:02:55.329Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:88:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:02:55.329Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:02:55.331Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:55.331Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:02:55.331Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:02:55.331Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:06:05.457Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:06:05.458Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:06:05.499Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.546Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.547Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:06:05.547Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:06:05.547Z"}
{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:06:05.548Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:06:05.550Z"}
{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.550Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.558Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.558Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:06:05.559Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:06:05.559Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.561Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:06:05.561Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:06:05.561Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.563Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.563Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:06:05.563Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:06:05.564Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:06:05.564Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.567Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.567Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:06:05.567Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.567Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:06:05.567Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:06:05.568Z"}
{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.568Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.569Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.569Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n    // if(!designatedBook) {\n    //   sendStatus(response, 404, 'ID Not Found');\n    //   return;\n    // }\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:06:05.569Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:06:05.570Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:06:05.570Z"}
{"level":"info","message":"Responding with a 500 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:06:05.570Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.573Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.573Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:06:05.573Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:06:05.573Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:86:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:06:05.573Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.575Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.575Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:06:05.575Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:06:05.575Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:86:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:06:05.575Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:06:05.577Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:06:05.577Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:06:05.577Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:06:05.577Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:08:04.284Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (request.url.query.id === undefined) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:08:04.285Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:08:04.327Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.375Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.376Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:08:04.376Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:08:04.377Z"}
{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:08:04.377Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:08:04.380Z"}
{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.380Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.388Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.389Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:08:04.389Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:08:04.389Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.392Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:08:04.392Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:08:04.392Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.394Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.394Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (request.url.query.id === undefined) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:08:04.394Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:08:04.395Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:08:04.395Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.398Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.399Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (request.url.query.id === undefined) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:08:04.399Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.399Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:08:04.399Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:08:04.399Z"}
{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.399Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.401Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.402Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 500, error);\n    }); /* istanbul ignore next */cov_3s4zhtb0l.s[34]++;\n    if (request.url.query.id === undefined) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[35]++;\n      sendStatus(response, 404, 'ID Not Found'); /* istanbul ignore next */cov_3s4zhtb0l.s[36]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[37]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[38]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[39]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:08:04.402Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:08:04.402Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:08:04.402Z"}
{"level":"info","message":"Responding with a 500 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:08:04.402Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.406Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.406Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:08:04.406Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:08:04.406Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:81:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:08:04.406Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.409Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.409Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:08:04.409Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:08:04.409Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:81:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:08:04.409Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:08:04.411Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:08:04.411Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[42]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[45]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[46]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[47]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[6][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[49]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[7][0]++;cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[7][1]++;cov_3s4zhtb0l.s[52]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[53]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:08:04.411Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:08:04.412Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:14:11.484Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:14:11.485Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:14:11.522Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.564Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.565Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:14:11.565Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:14:11.565Z"}
{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.565Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:14:11.566Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:14:11.568Z"}
{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.568Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.575Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.576Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:14:11.576Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:14:11.576Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.578Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:14:11.578Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:14:11.578Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.580Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.580Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:14:11.580Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:14:11.580Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:14:11.581Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.565Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.583Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.584Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:14:11.584Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.584Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:14:11.584Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:14:11.584Z"}
{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.584Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.586Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.586Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:14:11.586Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:14:11.586Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:14:11.586Z"}
{"level":"info","message":"Responding with a 404 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:14:11.587Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.588Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.588Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:14:11.588Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:14:11.588Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:77:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:14:11.588Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.590Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.590Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:14:11.590Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:14:11.590Z"}
{"message":"books is not defined","stack":"ReferenceError: books is not defined\n    at Object.<anonymous>.router.delete (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/route/book-router.js:77:3)\n    at requestParser.parse.then.request (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/router.js:50:87)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:14:11.591Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:14:11.593Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:14:11.593Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}\n  let designatedBook;\n  let bookIndex; /* istanbul ignore next */cov_3s4zhtb0l.s[41]++;\n  books.forEach((book, index) => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    if (request.url.query.id === books[index]['id']) {/* istanbul ignore next */cov_3s4zhtb0l.b[5][0]++;cov_3s4zhtb0l.s[43]++;\n      designatedBook = books[index]; /* istanbul ignore next */cov_3s4zhtb0l.s[44]++;\n      bookIndex = index; /* istanbul ignore next */cov_3s4zhtb0l.s[45]++;\n      return;\n    } else /* istanbul ignore next */{cov_3s4zhtb0l.b[5][1]++;}\n  }); /* istanbul ignore next */cov_3s4zhtb0l.s[46]++;\n  if (!designatedBook) {/* istanbul ignore next */cov_3s4zhtb0l.b[6][0]++;cov_3s4zhtb0l.s[47]++;\n    sendStatus(response, 404, 'Invalid ID'); /* istanbul ignore next */cov_3s4zhtb0l.s[48]++;\n    return;\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[6][1]++;cov_3s4zhtb0l.s[49]++;\n    books.splice(bookIndex, 1); /* istanbul ignore next */cov_3s4zhtb0l.s[50]++;\n    sendStatus(response, 204, 'Book was successfully deleted');\n  }\n}","timestamp":"2017-12-08T00:14:11.593Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:14:11.593Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:23:58.303Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:23:58.304Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:23:58.339Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.384Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.385Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:23:58.385Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:23:58.385Z"}
{"id":"15286210-dbae-11e7-9d87-edb5a59bf28a","timestamp":"2017-12-08T00:23:58.385Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:23:58.385Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:23:58.388Z"}
{"id":"15286210-dbae-11e7-9d87-edb5a59bf28a","timestamp":"2017-12-08T00:23:58.388Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.395Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.396Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:23:58.396Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:23:58.396Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.398Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:23:58.398Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:23:58.398Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.400Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.400Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:23:58.400Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:23:58.400Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:23:58.401Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.565Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"15286210-dbae-11e7-9d87-edb5a59bf28a","timestamp":"2017-12-08T00:23:58.385Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.403Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.404Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:23:58.404Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 15286210-dbae-11e7-9d87-edb5a59bf28a","timestamp":"2017-12-08T00:23:58.404Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:23:58.404Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:23:58.404Z"}
{"id":"15286210-dbae-11e7-9d87-edb5a59bf28a","timestamp":"2017-12-08T00:23:58.404Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.406Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.406Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:23:58.406Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:23:58.406Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:23:58.406Z"}
{"level":"info","message":"Responding with a 404 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:23:58.407Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.408Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.408Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:23:58.408Z"}
{"level":"verbose","message":"STORAGE - deleting an item with id 15286210-dbae-11e7-9d87-edb5a59bf28a","timestamp":"2017-12-08T00:23:58.409Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:23:58.409Z"}
{"level":"info","message":"Responding with a 204 code and the following data","timestamp":"2017-12-08T00:23:58.409Z"}
{"level":"info","message":"","timestamp":"2017-12-08T00:23:58.409Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.411Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.411Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:23:58.411Z"}
{"level":"verbose","message":"STORAGE - deleting an item with id invalid","timestamp":"2017-12-08T00:23:58.411Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:23:58.411Z"}
{"level":"info","message":"Responding with a 204 code and the following data","timestamp":"2017-12-08T00:23:58.412Z"}
{"level":"info","message":"","timestamp":"2017-12-08T00:23:58.412Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:23:58.415Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:23:58.416Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:23:58.416Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:23:58.416Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:24:37.470Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:24:37.471Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:24:37.511Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.553Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.554Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:24:37.554Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:24:37.555Z"}
{"id":"2c811920-dbae-11e7-8333-876edd07049a","timestamp":"2017-12-08T00:24:37.555Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:24:37.555Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:24:37.557Z"}
{"id":"2c811920-dbae-11e7-8333-876edd07049a","timestamp":"2017-12-08T00:24:37.557Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.565Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.565Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:24:37.565Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:24:37.565Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.567Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:24:37.567Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:24:37.567Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.569Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.569Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:24:37.569Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:24:37.569Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:24:37.570Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.565Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"2c811920-dbae-11e7-8333-876edd07049a","timestamp":"2017-12-08T00:24:37.555Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.572Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.572Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:24:37.572Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 2c811920-dbae-11e7-8333-876edd07049a","timestamp":"2017-12-08T00:24:37.573Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:24:37.573Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:24:37.573Z"}
{"id":"2c811920-dbae-11e7-8333-876edd07049a","timestamp":"2017-12-08T00:24:37.573Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.575Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.575Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:24:37.575Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:24:37.575Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:24:37.575Z"}
{"level":"info","message":"Responding with a 404 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:24:37.575Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.577Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.577Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:24:37.577Z"}
{"level":"verbose","message":"STORAGE - deleting an item with id 2c811920-dbae-11e7-8333-876edd07049a","timestamp":"2017-12-08T00:24:37.577Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:24:37.577Z"}
{"level":"info","message":"Responding with a 204 code and the following data","timestamp":"2017-12-08T00:24:37.578Z"}
{"level":"info","message":"","timestamp":"2017-12-08T00:24:37.578Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:24:37.579Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:24:37.580Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[43]++;\n    sendStatus(response, 404, error);\n  });\n  // let designatedBook;\n  // let bookIndex;\n  // books.forEach((book, index) => {\n  //   if(request.url.query.id === books[index]['id']) {\n  //     designatedBook = books[index];\n  //     bookIndex = index;\n  //     return;\n  //   }\n  // });\n  // if(!designatedBook) {\n  //   sendStatus(response, 404, 'Invalid ID');\n  //   return;\n  // } else {\n  //   books.splice(bookIndex, 1);\n  //   sendStatus(response, 204, 'Book was successfully deleted');\n  // }\n}","timestamp":"2017-12-08T00:24:37.580Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:24:37.580Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:25:50.977Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  // if(!request.url.query.id) {\n  //   sendStatus(response, 400, 'ID Not Provided');\n  //   return;\n  // }\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[40]++;\n    sendStatus(response, 400, error);\n  });\n}","timestamp":"2017-12-08T00:25:50.978Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:25:51.014Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.056Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.057Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:25:51.057Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:25:51.057Z"}
{"id":"5850c410-dbae-11e7-857e-81a6afc8d585","timestamp":"2017-12-08T00:25:51.058Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:25:51.058Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:25:51.060Z"}
{"id":"5850c410-dbae-11e7-857e-81a6afc8d585","timestamp":"2017-12-08T00:25:51.060Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.068Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.068Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:25:51.068Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:25:51.068Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.070Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:25:51.070Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:25:51.071Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.072Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.072Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:25:51.072Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:25:51.073Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:25:51.073Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.565Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"5850c410-dbae-11e7-857e-81a6afc8d585","timestamp":"2017-12-08T00:25:51.057Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.076Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.076Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:25:51.076Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 5850c410-dbae-11e7-857e-81a6afc8d585","timestamp":"2017-12-08T00:25:51.076Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:25:51.076Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:25:51.077Z"}
{"id":"5850c410-dbae-11e7-857e-81a6afc8d585","timestamp":"2017-12-08T00:25:51.077Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.079Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.079Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:25:51.079Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:25:51.079Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:25:51.079Z"}
{"level":"info","message":"Responding with a 404 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:25:51.079Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.081Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.081Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  // if(!request.url.query.id) {\n  //   sendStatus(response, 400, 'ID Not Provided');\n  //   return;\n  // }\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[40]++;\n    sendStatus(response, 400, error);\n  });\n}","timestamp":"2017-12-08T00:25:51.081Z"}
{"level":"verbose","message":"STORAGE - deleting an item with id 5850c410-dbae-11e7-857e-81a6afc8d585","timestamp":"2017-12-08T00:25:51.081Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:25:51.081Z"}
{"level":"info","message":"Responding with a 204 code and the following data","timestamp":"2017-12-08T00:25:51.082Z"}
{"level":"info","message":"","timestamp":"2017-12-08T00:25:51.082Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:25:51.083Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:25:51.083Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  // if(!request.url.query.id) {\n  //   sendStatus(response, 400, 'ID Not Provided');\n  //   return;\n  // }\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[39]++;\n    sendJSON(response, 204, result);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[12]++;cov_3s4zhtb0l.s[40]++;\n    sendStatus(response, 400, error);\n  });\n}","timestamp":"2017-12-08T00:25:51.083Z"}
{"level":"verbose","message":"STORAGE - deleting an item with id undefined","timestamp":"2017-12-08T00:25:51.083Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:25:51.083Z"}
{"level":"info","message":"Responding with a 204 code and the following data","timestamp":"2017-12-08T00:25:51.084Z"}
{"level":"info","message":"","timestamp":"2017-12-08T00:25:51.084Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-08T00:26:12.109Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"/api/books","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  });\n}","timestamp":"2017-12-08T00:26:12.110Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-08T00:26:12.147Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.193Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.194Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:26:12.194Z"}
{"level":"verbose","message":"STORAGE - adding the following book","timestamp":"2017-12-08T00:26:12.195Z"}
{"id":"64ea2b30-dbae-11e7-9d1f-d14b34529c6f","timestamp":"2017-12-08T00:26:12.195Z","title":"Harry Potter","author":"J.K. Rowling","level":"verbose","message":""}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:26:12.195Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:26:12.197Z"}
{"id":"64ea2b30-dbae-11e7-9d1f-d14b34529c6f","timestamp":"2017-12-08T00:26:12.197Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.205Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.205Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[2]++;cov_3s4zhtb0l.s[16]++;\n  if (!request.body) {/* istanbul ignore next */cov_3s4zhtb0l.b[0][0]++;cov_3s4zhtb0l.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[0][1]++;}cov_3s4zhtb0l.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_3s4zhtb0l.b[1][0]++;cov_3s4zhtb0l.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[1][1]++;}cov_3s4zhtb0l.s[22]++;\n  if (!request.body.author) {/* istanbul ignore next */cov_3s4zhtb0l.b[2][0]++;cov_3s4zhtb0l.s[23]++;\n    sendStatus(response, 400, 'author not found'); /* istanbul ignore next */cov_3s4zhtb0l.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[2][1]++;}\n  let book = /* istanbul ignore next */(cov_3s4zhtb0l.s[25]++, new Book(request.body.title, request.body.author)); /* istanbul ignore next */cov_3s4zhtb0l.s[26]++;\n  storage.addItem(book).\n  then(() => {/* istanbul ignore next */cov_3s4zhtb0l.f[3]++;cov_3s4zhtb0l.s[27]++;\n    sendJSON(response, 200, book);\n  }).\n  catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[4]++;cov_3s4zhtb0l.s[28]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:26:12.206Z"}
{"level":"info","message":"Responding with a 400 code due to title not found","timestamp":"2017-12-08T00:26:12.206Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.208Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-08T00:26:12.208Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/catherinelooper/codefellows/401/lab-assignments/08-09-vanilla-rest-server/lab-catherine/lib/request-parser.js:25:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:26:12.208Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.210Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.210Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:26:12.210Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:26:12.210Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:26:12.210Z"}
[{"id":"110b87d0-dba3-11e7-b9af-7db76e5b727a","timestamp":"2017-12-07T23:05:07.021Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b334b740-dba6-11e7-8a34-47eaac9a5bc6","timestamp":"2017-12-07T23:31:07.572Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"ba1d98e0-dba8-11e7-9073-7f5b0adbf79e","timestamp":"2017-12-07T23:45:38.158Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"41e3bed0-dba9-11e7-9cc8-a333fbba3409","timestamp":"2017-12-07T23:49:25.949Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"da661a90-dba9-11e7-b6eb-ef775b42d169","timestamp":"2017-12-07T23:53:41.818Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"83518310-dbaa-11e7-8028-594baccfea3d","timestamp":"2017-12-07T23:58:25.217Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"f70c9650-dbaa-11e7-b9d5-ff89a1c39953","timestamp":"2017-12-08T00:01:39.381Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"244cc130-dbab-11e7-93c0-2b8f69d3ed99","timestamp":"2017-12-08T00:02:55.299Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"95b24bb0-dbab-11e7-8451-637d7186a436","timestamp":"2017-12-08T00:06:05.547Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"dc865090-dbab-11e7-9925-cd47dde8762f","timestamp":"2017-12-08T00:08:04.377Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"b762c1d0-dbac-11e7-acff-93beff983bbe","timestamp":"2017-12-08T00:14:11.565Z","title":"Harry Potter","author":"J.K. Rowling"},{"id":"64ea2b30-dbae-11e7-9d1f-d14b34529c6f","timestamp":"2017-12-08T00:26:12.195Z","title":"Harry Potter","author":"J.K. Rowling"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.213Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.213Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:26:12.213Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id 64ea2b30-dbae-11e7-9d1f-d14b34529c6f","timestamp":"2017-12-08T00:26:12.214Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:26:12.214Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-08T00:26:12.214Z"}
{"id":"64ea2b30-dbae-11e7-9d1f-d14b34529c6f","timestamp":"2017-12-08T00:26:12.214Z","title":"Harry Potter","author":"J.K. Rowling","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.216Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.216Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[5]++;cov_3s4zhtb0l.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[3][0]++;cov_3s4zhtb0l.s[31]++;\n    storage.fetchItem(request.url.query.id).\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[6]++;cov_3s4zhtb0l.s[32]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[7]++;cov_3s4zhtb0l.s[33]++;\n      sendStatus(response, 404, error);\n    });\n\n  } else {/* istanbul ignore next */cov_3s4zhtb0l.b[3][1]++;cov_3s4zhtb0l.s[34]++;\n    storage.fetchAll().\n    then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[8]++;cov_3s4zhtb0l.s[35]++;\n      sendJSON(response, 200, result);\n    }).\n    catch(error => {/* istanbul ignore next */cov_3s4zhtb0l.f[9]++;cov_3s4zhtb0l.s[36]++;\n      sendStatus(response, 500, error);\n    });\n  }\n}","timestamp":"2017-12-08T00:26:12.216Z"}
{"level":"verbose","message":"STORAGE - fetching an item with id invalid","timestamp":"2017-12-08T00:26:12.216Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:26:12.216Z"}
{"level":"info","message":"Responding with a 404 code due to Error: __STORAGE_ERROR_ item not found","timestamp":"2017-12-08T00:26:12.216Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.218Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.218Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  });\n}","timestamp":"2017-12-08T00:26:12.218Z"}
{"level":"verbose","message":"STORAGE - deleting an item with id 64ea2b30-dbae-11e7-9d1f-d14b34529c6f","timestamp":"2017-12-08T00:26:12.218Z"}
{"level":"verbose","message":"STORAGE - fetching all files","timestamp":"2017-12-08T00:26:12.218Z"}
{"level":"info","message":"Responding with a 204 code and the following data","timestamp":"2017-12-08T00:26:12.219Z"}
{"level":"info","message":"","timestamp":"2017-12-08T00:26:12.219Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-08T00:26:12.220Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:26:12.220Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_3s4zhtb0l.f[10]++;cov_3s4zhtb0l.s[38]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_3s4zhtb0l.b[4][0]++;cov_3s4zhtb0l.s[39]++;\n    sendStatus(response, 400, 'ID Not Provided'); /* istanbul ignore next */cov_3s4zhtb0l.s[40]++;\n    return;\n  } else /* istanbul ignore next */{cov_3s4zhtb0l.b[4][1]++;}cov_3s4zhtb0l.s[41]++;\n  storage.deleteItem(request.url.query.id).\n  then(result => {/* istanbul ignore next */cov_3s4zhtb0l.f[11]++;cov_3s4zhtb0l.s[42]++;\n    sendJSON(response, 204, result);\n  });\n}","timestamp":"2017-12-08T00:26:12.220Z"}
{"level":"info","message":"Responding with a 400 code due to ID Not Provided","timestamp":"2017-12-08T00:26:12.220Z"}
