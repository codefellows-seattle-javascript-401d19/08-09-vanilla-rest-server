{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:43:00.802Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:43:00.803Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(() => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:43:00.803Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:43:00.803Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:43:00.804Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:43:00.804Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:43:00.804Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:43:00.804Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:43:00.804Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:43:00.852Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:43:00.867Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:43:00.868Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(() => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:43:00.868Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:43:00.869Z"}
{"message":"mountainStorage is not defined","stack":"ReferenceError: mountainStorage is not defined\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:3)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:43:00.869Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:43:00.876Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:43:00.876Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:43:00.876Z"}
{"level":"info","message":"Responding with a 200 code and the following data.","timestamp":"2017-12-07T23:43:00.876Z"}
[]
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:43:00.881Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:43:00.882Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:43:00.882Z"}
{"level":"info","message":"Responding with a 200 code and the following data.","timestamp":"2017-12-07T23:43:00.882Z"}
[]
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:43:00.886Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:43:00.886Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:43:00.886Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:43:00.889Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:43:00.889Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:43:00.889Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:43:00.889Z"}
{"level":"info","message":"User deleted ${mountainId} from database.","timestamp":"2017-12-07T23:43:00.890Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:43:00.892Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:43:00.892Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:43:00.892Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:43:00.892Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:43:00.892Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(() => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:46:20.035Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:46:20.077Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:46:20.127Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:46:20.129Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(() => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:46:20.129Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:46:20.132Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:46:20.132Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:46:20.141Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:46:20.141Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:46:20.141Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:46:20.141Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:46:20.141Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:46:20.144Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:46:20.145Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:46:20.145Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:46:20.145Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:46:20.145Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:46:20.147Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:46:20.147Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:46:20.147Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:46:20.151Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:46:20.151Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:46:20.151Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:46:20.152Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:46:20.152Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:46:20.154Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:46:20.154Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:46:20.154Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:46:20.154Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:46:20.154Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:47:32.186Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:47:32.186Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(() => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:47:32.186Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:47:32.187Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:47:32.187Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:47:32.187Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:47:32.187Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:47:32.187Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:47:32.187Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:47:32.231Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:47:32.283Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:47:32.284Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(() => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:47:32.284Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:47:32.284Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:47:32.284Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:47:32.292Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:47:32.292Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:47:32.293Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:47:32.293Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:47:32.293Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:47:32.296Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:47:32.297Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:47:32.297Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:47:32.297Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:47:32.297Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:47:32.299Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:47:32.299Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:47:32.299Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:47:32.303Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:47:32.304Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:47:32.304Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:47:32.304Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:47:32.304Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:47:32.306Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:47:32.306Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:47:32.306Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:47:32.307Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:47:32.307Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:49:29.921Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:49:29.922Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:49:29.966Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:49:30.017Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:30.019Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:49:30.019Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:49:30.019Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:49:30.019Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:49:30.026Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:30.027Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:49:30.027Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:49:30.027Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:49:30.027Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:49:30.030Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:30.030Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:49:30.030Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:49:30.031Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:49:30.031Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:49:30.033Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:49:30.033Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:49:30.033Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:49:30.037Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:30.037Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:49:30.038Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:49:30.038Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:49:30.038Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:49:30.040Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:49:30.040Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:49:30.040Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:49:30.040Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:49:30.040Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:50:10.785Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:50:10.786Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:50:10.834Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:50:10.884Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:50:10.886Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:50:10.886Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:50:10.886Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:50:10.886Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:50:10.893Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:50:10.893Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:50:10.893Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:50:10.894Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:50:10.894Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:50:10.896Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:50:10.897Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:50:10.897Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:50:10.897Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:50:10.897Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:50:10.899Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:50:10.899Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:50:10.900Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:50:10.903Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:50:10.904Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:50:10.904Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:50:10.904Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:50:10.904Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:50:10.906Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:50:10.906Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:50:10.907Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:50:10.907Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:50:10.907Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:51:54.779Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:51:54.780Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:51:54.826Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:51:54.840Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:51:54.841Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:51:54.841Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:51:54.842Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:51:54.842Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:51:54.849Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:51:54.849Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:51:54.849Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:51:54.849Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:51:54.850Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:51:54.852Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:51:54.853Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:51:54.853Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:51:54.853Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:51:54.853Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:51:54.855Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:51:54.856Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:51:54.856Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:51:54.860Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:51:54.860Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:51:54.860Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:51:54.860Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:51:54.860Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:51:54.862Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:51:54.863Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:51:54.863Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:51:54.863Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:51:54.863Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:53:46.232Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:53:46.233Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:55:52.957Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:55:52.957Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:55:52.957Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:55:52.958Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:55:52.958Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:55:52.958Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:55:52.958Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:55:52.958Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:55:52.958Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:55:53.001Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:55:53.016Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:55:53.017Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:55:53.017Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:55:53.017Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:55:53.017Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:55:53.025Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:55:53.025Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:55:53.025Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:55:53.025Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:55:53.025Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:55:53.028Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:55:53.029Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:55:53.029Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:55:53.029Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:55:53.029Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:55:53.031Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:55:53.031Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:55:53.031Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:55:53.036Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:55:53.036Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:55:53.036Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:55:53.036Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:55:53.036Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:55:53.038Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:55:53.039Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:55:53.039Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:55:53.039Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:55:53.039Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-07T23:57:38.403Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:57:38.404Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-07T23:57:38.472Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:57:38.519Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:57:38.520Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-07T23:57:38.520Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:57:38.521Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:57:38.521Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:57:38.528Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:57:38.529Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:57:38.529Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:57:38.529Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:57:38.529Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:57:38.532Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:57:38.533Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-07T23:57:38.533Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:57:38.533Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:57:38.533Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:57:38.535Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:57:38.535Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-07T23:57:38.536Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:57:38.540Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:57:38.540Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:57:38.540Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-07T23:57:38.541Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-07T23:57:38.541Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-07T23:57:38.543Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T23:57:38.543Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-07T23:57:38.543Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-07T23:57:38.543Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-07T23:57:38.543Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-08T00:00:23.795Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:00:23.796Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-08T00:00:23.861Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:00:23.882Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:00:23.883Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:00:23.883Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:00:23.884Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at Object.<anonymous>.router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:00:23.884Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:00:23.885Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:00:23.886Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:00:23.886Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:00:23.886Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:00:23.886Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:00:23.892Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:00:23.892Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:00:23.893Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:00:23.893Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:00:23.893Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:00:23.895Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:00:23.896Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:00:23.896Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:00:23.900Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:00:23.900Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:00:23.900Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:00:23.900Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at Object.<anonymous>.router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:89)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:00:23.901Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:00:23.903Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:00:23.903Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:00:23.903Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-08T00:00:23.904Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-08T00:00:23.904Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-08T00:01:11.606Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:01:11.607Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-08T00:02:17.969Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:02:17.970Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-08T00:02:17.982Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-08T00:02:27.340Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:02:27.341Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:02:27.437Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:27.439Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-08T00:02:27.439Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:02:27.439Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:02:27.439Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:02:27.442Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:27.442Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:02:27.442Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:02:27.443Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:02:27.443Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:02:27.447Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:27.448Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:02:27.448Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:02:27.448Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:02:27.448Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:02:27.450Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:02:27.451Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:02:27.451Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:02:27.455Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:27.455Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:02:27.455Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:02:27.456Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:02:27.456Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:02:27.458Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:02:27.458Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:02:27.458Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-08T00:02:27.458Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-08T00:02:27.458Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-08T00:04:06.328Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:04:06.329Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:04:06.330Z"}
{"level":"info","message":"Server is online at port 3000","timestamp":"2017-12-08T00:04:06.337Z"}
{"level":"info","message":"Adding an POST url and callback","timestamp":"2017-12-08T00:04:39.615Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[2]++;cov_q0sdvsm27.s[16]++;\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {/* istanbul ignore next */cov_q0sdvsm27.b[0][0]++;cov_q0sdvsm27.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_q0sdvsm27.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[0][1]++;}cov_q0sdvsm27.s[19]++;\n\n  if (!request.body.name) {/* istanbul ignore next */cov_q0sdvsm27.b[1][0]++;cov_q0sdvsm27.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_q0sdvsm27.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[1][1]++;}cov_q0sdvsm27.s[22]++;\n\n  if (!request.body.location) {/* istanbul ignore next */cov_q0sdvsm27.b[2][0]++;cov_q0sdvsm27.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[2][1]++;}cov_q0sdvsm27.s[25]++;\n\n  if (!request.body.elevation) {/* istanbul ignore next */cov_q0sdvsm27.b[3][0]++;cov_q0sdvsm27.s[26]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_q0sdvsm27.s[27]++;\n    return;\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[3][1]++;}\n\n  let mountain = /* istanbul ignore next */(cov_q0sdvsm27.s[28]++, new Mountain(request.body.name, request.body.location, request.body.elevation)); /* istanbul ignore next */cov_q0sdvsm27.s[29]++;\n  mountainStorage.addItem(mountain).\n  then(() => {/* istanbul ignore next */cov_q0sdvsm27.f[3]++;cov_q0sdvsm27.s[30]++;\n    sendJSON(response, 200, mountain);\n  }).\n  catch(error => {/* istanbul ignore next */cov_q0sdvsm27.f[4]++;cov_q0sdvsm27.s[31]++;\n    sendStatus(response, 500, error);\n  });\n}","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"Adding an GET url and callback","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[5]++;cov_q0sdvsm27.s[33]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[4][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[34]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[35]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[5][0]++;cov_q0sdvsm27.s[36]++;oneMountain = mountain;} else /* istanbul ignore next */{cov_q0sdvsm27.b[5][1]++;}cov_q0sdvsm27.s[37]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[38]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[6][0]++;cov_q0sdvsm27.s[39]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[40]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[6][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[4][1]++;}cov_q0sdvsm27.s[41]++;\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"Adding an DELETE url and callback","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"/api/mountains","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_q0sdvsm27.f[6]++;cov_q0sdvsm27.s[43]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[7][0]++;\n    let oneMountain; /* istanbul ignore next */cov_q0sdvsm27.s[44]++;\n    for (let mountain of mountains) {/* istanbul ignore next */cov_q0sdvsm27.s[45]++;\n      if (request.url.query.id === mountain.id)\n        {/* istanbul ignore next */cov_q0sdvsm27.b[8][0]++;cov_q0sdvsm27.s[46]++;oneMountain = mountain.id;} else /* istanbul ignore next */{cov_q0sdvsm27.b[8][1]++;}cov_q0sdvsm27.s[47]++;\n      break;\n    } /* istanbul ignore next */cov_q0sdvsm27.s[48]++;\n    if (!request.url.query.id) {/* istanbul ignore next */cov_q0sdvsm27.b[9][0]++;cov_q0sdvsm27.s[49]++;\n      sendStatus(response, 404, 'id not found'); /* istanbul ignore next */cov_q0sdvsm27.s[50]++;\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`); /* istanbul ignore next */cov_q0sdvsm27.s[51]++;\n      return;\n    } else /* istanbul ignore next */{cov_q0sdvsm27.b[9][1]++;}\n  } else /* istanbul ignore next */{cov_q0sdvsm27.b[7][1]++;}cov_q0sdvsm27.s[52]++;\n  sendStatus(response, 204, 'Deleted from database.'); /* istanbul ignore next */cov_q0sdvsm27.s[53]++;\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:04:39.616Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:04:39.740Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:04:39.742Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-08T00:04:39.742Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:04:39.743Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:04:39.743Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:04:39.746Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:04:39.746Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:04:39.746Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:04:39.746Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:04:39.746Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:04:39.750Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:04:39.751Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:04:39.751Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:04:39.751Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:04:39.751Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:04:39.753Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:04:39.754Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:04:39.754Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:04:39.758Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:04:39.758Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:04:39.758Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:04:39.758Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:04:39.758Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:04:39.760Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:04:39.760Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:04:39.760Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-08T00:04:39.761Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-08T00:04:39.761Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:05:10.035Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:05:10.036Z"}
{"level":"info","message":"(request, response) => {\n  //Here I know that my request has been pre-parsed (?)\n  if (!request.body) {\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n\n  if (!request.body.name) {\n    sendStatus(response, 400, 'title not found');\n    return;\n  }\n\n  if (!request.body.location) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  if (!request.body.elevation) {\n    sendStatus(response, 400, 'content not found');\n    return;\n  }\n\n  let mountain = new Mountain(request.body.name, request.body.location, request.body.elevation);\n  mountainStorage.addItem(mountain)\n    .then( () => {\n      sendJSON(response, 200, mountain);\n    })\n    .catch(error => {\n      sendStatus(response, 500, error)\n    });\n}","timestamp":"2017-12-08T00:05:10.036Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:05:10.036Z"}
{"message":"mountainStorage.addItem is not a function","stack":"TypeError: mountainStorage.addItem is not a function\n    at router.post (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:50:19)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:05:10.036Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:05:10.042Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:05:10.043Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:05:10.043Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:05:10.043Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:73:27)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:05:10.043Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:05:10.045Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:05:10.045Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain;\n        break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found')\n      return;\n    }\n  }\n  sendJSON(response, 200, mountains);\n}","timestamp":"2017-12-08T00:05:10.045Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:05:10.045Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.get (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:63:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:05:10.045Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:05:10.047Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:05:10.048Z"}
{"message":"Unexpected end of JSON input","stack":"SyntaxError: Unexpected end of JSON input\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.request.on (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/request-parser.js:34:31)\n    at IncomingMessage.emit (events.js:159:13)\n    at endReadableNT (_stream_readable.js:1054:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-08T00:05:10.048Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:05:10.052Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:05:10.052Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:05:10.052Z"}
{"level":"info","message":"__REQUEST_ERROR__","timestamp":"2017-12-08T00:05:10.052Z"}
{"message":"mountains is not defined","stack":"ReferenceError: mountains is not defined\n    at router.delete (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/route/mountain-router.js:79:26)\n    at requestParser.parse.then.request (/Users/kerrynordstrom/codefellows/401/labs/08-09-vanilla-rest-server/lab-kerry/lib/router.js:55:16)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)","level":"info","timestamp":"2017-12-08T00:05:10.052Z"}
{"level":"info","message":"Routing a request","timestamp":"2017-12-08T00:05:10.054Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-08T00:05:10.054Z"}
{"level":"info","message":"(request, response) => {\n  if (request.url.query.id) {\n    let oneMountain;\n    for (let mountain of mountains) {\n      if (request.url.query.id === mountain.id)\n        oneMountain = mountain.id;\n      break;\n    }\n    if (!request.url.query.id) {\n      sendStatus(response, 404, 'id not found');\n      logger.log('info', `Deletion requested from database, but ${request.url.query.id} not found.`);\n      return;\n    }\n  }\n  sendStatus(response, 204, 'Deleted from database.');\n  logger.log('info', `User deleted ${request.url.query.id} from database.`);\n}","timestamp":"2017-12-08T00:05:10.054Z"}
{"level":"info","message":"Responding with a 204 code due to Deleted from database..","timestamp":"2017-12-08T00:05:10.054Z"}
{"level":"info","message":"User deleted undefined from database.","timestamp":"2017-12-08T00:05:10.054Z"}
