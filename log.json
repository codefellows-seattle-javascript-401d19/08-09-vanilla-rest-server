{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T04:12:30.698Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:12:30.702Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:12:30.703Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T04:12:30.703Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:12:30.703Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:12:30.703Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T04:12:30.720Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:13:13.304Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:13:13.309Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T04:13:13.311Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/router.js:44:38)\n    at process._tickCallback (internal/process/next_tick.js:109:7)","level":"info","timestamp":"2017-12-07T04:13:13.311Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:18:09.186Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:18:09.187Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:18:09.188Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:18:09.189Z"}
{"id":"a1ad0640-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:18:09.189Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:19:31.123Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:19:31.124Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:19:31.124Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:19:31.124Z"}
{"id":"d2837740-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:19:31.124Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:21:49.891Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:21:49.891Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:21:49.891Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:21:49.891Z"}
{"id":"2539a130-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:21:49.892Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:22:28.700Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:22:28.701Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:22:28.701Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:22:28.701Z"}
{"id":"3c5b90d0-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:22:28.702Z","name":"Prince of Persia","superPower":"Time Travel","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:23:39.304Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:23:39.305Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:23:39.305Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:23:39.305Z"}
[{"id":"a1ad0640-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:18:09.188Z","name":"Kain","superPower":"Immortality"},{"id":"d2837740-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:19:31.124Z","name":"Deathstroke","superPower":"Healing"},{"id":"2539a130-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:21:49.891Z","name":"Mastermind","superPower":"Mind Control"},{"id":"3c5b90d0-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:22:28.701Z","name":"Prince of Persia","superPower":"Time Travel"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:25:37.591Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:25:37.592Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:25:37.592Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:25:37.594Z"}
{"id":"a1ad0640-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:25:37.595Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:25:54.216Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:25:54.219Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:25:54.220Z"}
{"level":"info","message":"Responding with a 404 code and following data","timestamp":"2017-12-07T04:25:54.220Z"}
{"level":"info","message":"Hero NOT available, ID not found","timestamp":"2017-12-07T04:25:54.220Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:26:38.345Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:26:38.346Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:26:38.346Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:26:38.346Z"}
[{"id":"a1ad0640-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:18:09.188Z","name":"Kain","superPower":"Immortality"},{"id":"d2837740-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:19:31.124Z","name":"Deathstroke","superPower":"Healing"},{"id":"2539a130-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:21:49.891Z","name":"Mastermind","superPower":"Mind Control"},{"id":"3c5b90d0-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:22:28.701Z","name":"Prince of Persia","superPower":"Time Travel"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:27:41.425Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:27:41.425Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T04:27:41.426Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/router.js:44:38)\n    at process._tickCallback (internal/process/next_tick.js:109:7)","level":"info","timestamp":"2017-12-07T04:27:41.426Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:29:53.617Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:29:53.617Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:29:53.618Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:29:53.618Z"}
[{"id":"a1ad0640-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:18:09.188Z","name":"Kain","superPower":"Immortality"},{"id":"d2837740-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:19:31.124Z","name":"Deathstroke","superPower":"Healing"},{"id":"2539a130-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:21:49.891Z","name":"Mastermind","superPower":"Mind Control"},{"id":"3c5b90d0-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:22:28.701Z","name":"Prince of Persia","superPower":"Time Travel"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:29:59.230Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:29:59.230Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T04:29:59.230Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/router.js:44:38)\n    at process._tickCallback (internal/process/next_tick.js:109:7)","level":"info","timestamp":"2017-12-07T04:29:59.230Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:31:24.206Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:31:24.207Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'Hero NOT available, ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:31:24.207Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:31:24.207Z"}
[{"id":"a1ad0640-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:18:09.188Z","name":"Kain","superPower":"Immortality"},{"id":"d2837740-db05-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:19:31.124Z","name":"Deathstroke","superPower":"Healing"},{"id":"2539a130-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:21:49.891Z","name":"Mastermind","superPower":"Mind Control"},{"id":"3c5b90d0-db06-11e7-b2ac-49a0ecf0b126","timestamp":"2017-12-07T04:22:28.701Z","name":"Prince of Persia","superPower":"Time Travel"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:31:28.912Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:31:28.912Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T04:31:28.913Z"}
{"message":"Cannot read property 'toString' of undefined","stack":"TypeError: Cannot read property 'toString' of undefined\n    at requestParser.parse.then.request (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/router.js:44:38)\n    at process._tickCallback (internal/process/next_tick.js:109:7)","level":"info","timestamp":"2017-12-07T04:31:28.913Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T04:55:11.567Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:55:11.570Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendJSON(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  // edge case lack of resources\n  if(!heroName) {\n    sendJSON(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    sendJSON(response, 204, 'no body content, delete complete'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T04:55:11.571Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T04:55:11.587Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:55:30.263Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:55:30.270Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:55:30.270Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:55:30.271Z"}
[]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:55:58.984Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:55:58.986Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:55:58.986Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:55:58.987Z"}
{"id":"ea94ddb0-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:55:58.987Z","name":"Prince of Persia","superPower":"Time Travel","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:56:05.361Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:56:05.362Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:56:05.362Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:56:05.362Z"}
{"id":"ee619d20-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:56:05.362Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:56:11.171Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:56:11.171Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:56:11.171Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:56:11.172Z"}
[{"id":"ea94ddb0-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:55:58.987Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"ee619d20-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:56:05.362Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:56:34.813Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:56:34.815Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:56:34.815Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:56:34.815Z"}
[{"id":"ea94ddb0-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:55:58.987Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"ee619d20-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:56:05.362Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:57:35.081Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:57:35.081Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:57:35.081Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:57:35.082Z"}
[{"id":"ea94ddb0-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:55:58.987Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"ee619d20-db0a-11e7-afad-e5450bc46460","timestamp":"2017-12-07T04:56:05.362Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T04:59:50.232Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:59:50.236Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:59:50.236Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T04:59:50.236Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T04:59:50.236Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T04:59:50.237Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T04:59:50.253Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T04:59:58.052Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T04:59:58.058Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T04:59:58.058Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T04:59:58.059Z"}
{"id":"79145bb0-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T04:59:58.060Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:00:01.732Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:00:01.733Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:00:01.733Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:00:01.733Z"}
{"id":"7b44f750-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T05:00:01.733Z","name":"Prince of Persia","superPower":"Time Travel","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:00:07.069Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:00:07.069Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:00:07.069Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:00:07.070Z"}
{"id":"7e7353e0-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T05:00:07.070Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:00:14.666Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:00:14.666Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:00:14.666Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:00:14.667Z"}
[{"id":"79145bb0-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T04:59:58.059Z","name":"Mastermind","superPower":"Mind Control"},{"id":"7b44f750-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T05:00:01.733Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"7e7353e0-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T05:00:07.070Z","name":"Deathstroke","superPower":"Healing"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:00:31.657Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:00:31.659Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:00:31.659Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:00:31.659Z"}
[{"id":"79145bb0-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T04:59:58.059Z","name":"Mastermind","superPower":"Mind Control"},{"id":"7b44f750-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T05:00:01.733Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"7e7353e0-db0b-11e7-a7e5-4bfc360ff8fb","timestamp":"2017-12-07T05:00:07.070Z","name":"Deathstroke","superPower":"Healing"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:05:38.554Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:05:38.558Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:05:38.558Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:05:38.558Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:05:38.558Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:05:38.558Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:05:38.573Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:05:42.837Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:05:42.842Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:05:42.843Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:05:42.844Z"}
{"id":"469638b0-db0c-11e7-9506-f385239aed46","timestamp":"2017-12-07T05:05:42.844Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:05:47.286Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:05:47.287Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:05:47.287Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:05:47.287Z"}
{"id":"493c5270-db0c-11e7-9506-f385239aed46","timestamp":"2017-12-07T05:05:47.287Z","name":"Prince of Persia","superPower":"Time Travel","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:05:53.662Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:05:53.662Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:05:53.662Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:05:53.663Z"}
[{"id":"469638b0-db0c-11e7-9506-f385239aed46","timestamp":"2017-12-07T05:05:42.844Z","name":"Deathstroke","superPower":"Healing"},{"id":"493c5270-db0c-11e7-9506-f385239aed46","timestamp":"2017-12-07T05:05:47.287Z","name":"Prince of Persia","superPower":"Time Travel"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:07:11.964Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:07:11.965Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendJSON(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:07:11.965Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:07:11.966Z"}
[{"id":"469638b0-db0c-11e7-9506-f385239aed46","timestamp":"2017-12-07T05:05:42.844Z","name":"Deathstroke","superPower":"Healing"},{"id":"493c5270-db0c-11e7-9506-f385239aed46","timestamp":"2017-12-07T05:05:47.287Z","name":"Prince of Persia","superPower":"Time Travel"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:10:17.715Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:10:17.718Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:10:17.719Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:10:17.719Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:10:17.719Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:10:17.719Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:10:17.735Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:10:20.756Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:10:20.762Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:10:20.762Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:10:20.764Z"}
{"id":"ec3d72b0-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:20.764Z","name":"Prince of Persia","superPower":"Time Travel","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:10:24.145Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:10:24.146Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:10:24.146Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:10:24.147Z"}
{"id":"ee41ce30-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:24.147Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:10:30.014Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:10:30.015Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:10:30.015Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:10:30.015Z"}
{"id":"f1c130f0-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:30.015Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:10:36.162Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:10:36.162Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:10:36.162Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:10:36.162Z"}
{"id":"f56b2620-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:36.162Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:10:43.285Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:10:43.286Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:10:43.286Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:10:43.286Z"}
[{"id":"ec3d72b0-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:20.763Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"ee41ce30-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:24.147Z","name":"Deathstroke","superPower":"Healing"},{"id":"f1c130f0-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:30.015Z","name":"Mastermind","superPower":"Mind Control"},{"id":"f56b2620-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:36.162Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:10:52.118Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:10:52.119Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:10:52.119Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:10:52.119Z"}
[{"id":"ec3d72b0-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:20.763Z","name":"Prince of Persia","superPower":"Time Travel"},{"id":"ee41ce30-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:24.147Z","name":"Deathstroke","superPower":"Healing"},{"id":"f1c130f0-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:30.015Z","name":"Mastermind","superPower":"Mind Control"},{"id":"f56b2620-db0c-11e7-811e-89fd8b3bb63c","timestamp":"2017-12-07T05:10:36.162Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:12:49.088Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:12:49.091Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:12:49.092Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:12:49.092Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:12:49.092Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:12:49.092Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:12:49.109Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:12:55.193Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:12:55.199Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:12:55.200Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:12:55.201Z"}
{"id":"484aaa00-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:12:55.201Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:13:01.515Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:13:01.517Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:13:01.517Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:13:01.517Z"}
{"id":"4c0e8fd0-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:13:01.517Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:13:06.925Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:13:06.926Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:13:06.926Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:13:06.926Z"}
[{"id":"484aaa00-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:12:55.201Z","name":"Kain","superPower":"Immortality"},{"id":"4c0e8fd0-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:13:01.517Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:13:13.516Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:13:13.517Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:13:13.518Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:13:13.518Z"}
[{"id":"484aaa00-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:12:55.201Z","name":"Kain","superPower":"Immortality"},{"id":"4c0e8fd0-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:13:01.517Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:16:56.858Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:16:56.858Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:16:56.859Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:16:56.860Z"}
[{"id":"484aaa00-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:12:55.201Z","name":"Kain","superPower":"Immortality"},{"id":"4c0e8fd0-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:13:01.517Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:17:06.115Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:17:06.115Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:17:06.115Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:17:06.115Z"}
[{"id":"484aaa00-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:12:55.201Z","name":"Kain","superPower":"Immortality"},{"id":"4c0e8fd0-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:13:01.517Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:18:18.307Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:18:18.307Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:18:18.308Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:18:18.308Z"}
{"id":"484aaa00-db0d-11e7-a3b5-fd51b3b773ca","timestamp":"2017-12-07T05:18:18.309Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:19:52.047Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:19:52.048Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:19:52.048Z"}
{"level":"info","message":"Responding with a 400 code due to the hero superPower not found","timestamp":"2017-12-07T05:19:52.048Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:20:28.509Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:20:28.510Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:20:28.510Z"}
{"level":"info","message":"Responding with a 400 code due to the hero superPower not found","timestamp":"2017-12-07T05:20:28.510Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:21:57.353Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:21:57.356Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:21:57.356Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:21:57.356Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:21:57.356Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:21:57.357Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:21:57.357Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:21:57.357Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendJSON(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  // edge case lack of resources\n  if(!heroName) {\n    sendJSON(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    sendJSON(response, 204, 'no body content, delete complete'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:21:57.357Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:21:57.372Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:22:04.590Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:22:04.596Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:22:04.596Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:22:04.597Z"}
{"id":"8fc1fe50-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:04.597Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:22:09.314Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:22:09.315Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:22:09.315Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:22:09.316Z"}
{"id":"9291e730-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:09.316Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:22:18.581Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:22:18.581Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:22:18.581Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:22:18.582Z"}
[{"id":"8fc1fe50-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:04.597Z","name":"Mastermind","superPower":"Mind Control"},{"id":"9291e730-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:09.315Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:22:33.033Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:22:33.034Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:22:33.034Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:22:33.035Z"}
{"id":"9291e730-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:33.035Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:22:47.422Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:22:47.422Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:22:47.422Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:22:47.422Z"}
[{"id":"8fc1fe50-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:04.597Z","name":"Mastermind","superPower":"Mind Control"},{"id":"9291e730-db0e-11e7-bfa6-131df69fccef","timestamp":"2017-12-07T05:22:09.315Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:25:37.081Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:25:37.084Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    sendStatus(response, 204, '__DELETE__ hero'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:25:37.085Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:25:37.101Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:25:41.136Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:25:41.142Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:25:41.142Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:25:41.143Z"}
{"id":"10d42360-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:25:41.143Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:25:44.864Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:25:44.865Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:25:44.865Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:25:44.865Z"}
{"id":"130c3910-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:25:44.865Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:26:04.421Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:26:04.421Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:26:04.421Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:26:04.421Z"}
{"id":"1eb43b50-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:26:04.421Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:26:07.367Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:26:07.368Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:26:07.368Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:26:07.368Z"}
[{"id":"10d42360-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:25:41.143Z","name":"Kain","superPower":"Immortality"},{"id":"130c3910-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:25:44.865Z","name":"Mastermind","superPower":"Mind Control"},{"id":"1eb43b50-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:26:04.421Z","name":"Deathstroke","superPower":"Healing"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:27:39.834Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:27:39.835Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:27:39.835Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:27:39.835Z"}
{"id":"1eb43b50-db0f-11e7-ada6-ef780e1311bb","timestamp":"2017-12-07T05:27:39.836Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:28:48.537Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:28:48.541Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:28:48.541Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:28:48.541Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:28:48.541Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:28:48.541Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:28:48.542Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:28:48.542Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    logger.log('info', 'inside DELETE');\n    console.log('inside DELETE');\n    sendStatus(response, 204, '__DELETE__ hero'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:28:48.542Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:28:48.560Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:28:51.844Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:28:51.850Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:28:51.850Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:28:51.851Z"}
{"id":"827fdea0-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:51.851Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:28:55.477Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:28:55.478Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:28:55.478Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:28:55.479Z"}
{"id":"84a97560-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:55.479Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:29:00.999Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:29:01.000Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:29:01.000Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:29:01.000Z"}
{"id":"87f40c80-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:29:01.000Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:29:10.000Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:29:10.001Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:29:10.001Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:29:10.002Z"}
[{"id":"827fdea0-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:51.851Z","name":"Deathstroke","superPower":"Healing"},{"id":"84a97560-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:55.479Z","name":"Mastermind","superPower":"Mind Control"},{"id":"87f40c80-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:29:01.000Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:30:13.247Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:30:13.247Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    logger.log('info', 'inside DELETE');\n    console.log('inside DELETE');\n    sendStatus(response, 204, '__DELETE__ hero'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:30:13.247Z"}
{"level":"info","message":"Responding with a 400 code due to the lack of ID in query","timestamp":"2017-12-07T05:30:13.248Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:30:57.231Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:30:57.232Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:30:57.232Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:30:57.232Z"}
[{"id":"827fdea0-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:51.851Z","name":"Deathstroke","superPower":"Healing"},{"id":"84a97560-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:55.479Z","name":"Mastermind","superPower":"Mind Control"},{"id":"87f40c80-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:29:01.000Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:32:01.050Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:32:01.051Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    logger.log('info', 'inside DELETE');\n    console.log('inside DELETE');\n    sendStatus(response, 204, '__DELETE__ hero'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:32:01.052Z"}
{"level":"info","message":"inside DELETE","timestamp":"2017-12-07T05:32:01.052Z"}
{"level":"info","message":"Responding with a 204 code due to the __DELETE__ hero","timestamp":"2017-12-07T05:32:01.055Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:34:07.427Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:34:07.428Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:34:07.428Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:34:07.428Z"}
[{"id":"827fdea0-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:51.851Z","name":"Deathstroke","superPower":"Healing"},{"id":"84a97560-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:28:55.479Z","name":"Mastermind","superPower":"Mind Control"},{"id":"87f40c80-db0f-11e7-acba-5d64da398545","timestamp":"2017-12-07T05:29:01.000Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:47:15.605Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:47:15.609Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:47:15.609Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:47:15.609Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:47:15.609Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:47:15.609Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:47:15.609Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:47:15.610Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexof(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroName, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:47:15.610Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:47:15.624Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:48:26.941Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:48:26.947Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:48:26.948Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:48:26.949Z"}
{"id":"3ee99840-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:48:26.949Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:48:36.333Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:48:36.334Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:48:36.334Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:48:36.334Z"}
{"id":"4481c8e0-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:48:36.334Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:49:33.196Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:49:33.197Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:49:33.197Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:49:33.197Z"}
{"id":"666663d0-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:49:33.197Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:49:45.997Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:49:45.998Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:49:45.998Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:49:45.998Z"}
[{"id":"3ee99840-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:48:26.949Z","name":"Mastermind","superPower":"Mind Control"},{"id":"4481c8e0-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:48:36.334Z","name":"Deathstroke","superPower":"Healing"},{"id":"666663d0-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:49:33.197Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:50:43.347Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:50:43.348Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexof(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroName, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:50:43.348Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T05:50:43.351Z"}
{"message":"heroes.indexof is not a function","stack":"TypeError: heroes.indexof is not a function\n    at router.delete (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/route/hero-router.js:86:26)\n    at requestParser.parse.then.request (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/router.js:46:16)\n    at process._tickCallback (internal/process/next_tick.js:109:7)","level":"info","timestamp":"2017-12-07T05:50:43.351Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:52:44.239Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:52:44.239Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:52:44.239Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:52:44.240Z"}
[{"id":"3ee99840-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:48:26.949Z","name":"Mastermind","superPower":"Mind Control"},{"id":"4481c8e0-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:48:36.334Z","name":"Deathstroke","superPower":"Healing"},{"id":"666663d0-db12-11e7-b3a1-55b8c5fc2005","timestamp":"2017-12-07T05:49:33.197Z","name":"Kain","superPower":"Immortality"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:53:10.684Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:53:10.684Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexof(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroName, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:53:10.687Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T05:53:10.688Z"}
{"message":"heroes.indexof is not a function","stack":"TypeError: heroes.indexof is not a function\n    at router.delete (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/route/hero-router.js:86:26)\n    at requestParser.parse.then.request (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/router.js:46:16)\n    at process._tickCallback (internal/process/next_tick.js:109:7)","level":"info","timestamp":"2017-12-07T05:53:10.688Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T05:53:35.083Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  // let heroIndex;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexOf(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroIndex, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:53:35.087Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T05:53:35.102Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:53:44.043Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:53:44.049Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:53:44.049Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:53:44.050Z"}
{"id":"fbeb5e10-db12-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:44.050Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:53:50.661Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:53:50.662Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:53:50.662Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:53:50.663Z"}
{"id":"ffdc6e60-db12-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:50.663Z","name":"Deathstroke","superPower":"Healing","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:53:58.716Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:53:58.716Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T05:53:58.716Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:53:58.716Z"}
{"id":"04a95fc0-db13-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:58.716Z","name":"Mastermind","superPower":"Mind Control","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:54:03.063Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:54:03.064Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:54:03.064Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:54:03.064Z"}
[{"id":"fbeb5e10-db12-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:44.050Z","name":"Kain","superPower":"Immortality"},{"id":"ffdc6e60-db12-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:50.663Z","name":"Deathstroke","superPower":"Healing"},{"id":"04a95fc0-db13-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:58.716Z","name":"Mastermind","superPower":"Mind Control"}]
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:54:35.450Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:54:35.451Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  // let heroIndex;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexOf(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroIndex, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T05:54:35.451Z"}
{"level":"info","message":"Responding with a 204 code due to the SUCCESSFULLY__DELETING__A__HERO","timestamp":"2017-12-07T05:54:35.452Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T05:54:59.532Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T05:54:59.533Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T05:54:59.533Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T05:54:59.534Z"}
[{"id":"fbeb5e10-db12-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:44.050Z","name":"Kain","superPower":"Immortality"},{"id":"ffdc6e60-db12-11e7-a9d7-fd43f03b7634","timestamp":"2017-12-07T05:53:50.663Z","name":"Deathstroke","superPower":"Healing"}]
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:07:08.833Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  // let heroIndex;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexOf(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroIndex, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:07:08.837Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:07:08.854Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:08:10.588Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:08:10.590Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:08:10.591Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:08:10.591Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:08:10.591Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:08:10.591Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:08:10.592Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:08:10.592Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:08:10.592Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:08:10.716Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:08:10.754Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:08:10.757Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:08:10.757Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:08:10.759Z"}
{"id":"0084aa60-db15-11e7-8f8a-0bc2f62a6ae1","timestamp":"2017-12-07T06:08:10.759Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:08:10.784Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:08:10.785Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:08:10.785Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:08:10.785Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:09:05.816Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:09:05.818Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:09:05.818Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:09:05.819Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:09:05.819Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:09:05.819Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:09:05.819Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:09:05.819Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:09:05.819Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:09:05.945Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:09:05.980Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:09:05.983Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:09:05.983Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:09:05.984Z"}
{"id":"216f54f0-db15-11e7-a4bc-f7511f356238","timestamp":"2017-12-07T06:09:05.984Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:09:06.013Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:09:06.014Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:09:06.014Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:09:06.014Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:12:19.233Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:12:19.235Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:12:19.236Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:12:19.350Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:12:19.385Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:12:19.388Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:12:19.388Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:12:19.389Z"}
{"id":"94b6bed0-db15-11e7-a28c-ab0803bb786a","timestamp":"2017-12-07T06:12:19.389Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:12:19.419Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:12:19.420Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:12:19.420Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:12:19.420Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:15:41.034Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:15:41.037Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:15:41.037Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:15:41.037Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:15:41.037Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:15:41.037Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:15:41.038Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:15:41.038Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:15:41.038Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:15:41.149Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:15:41.184Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:15:41.187Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:15:41.187Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:15:41.188Z"}
{"id":"0cfed440-db16-11e7-82d3-5b9a50f44d90","timestamp":"2017-12-07T06:15:41.188Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:15:41.217Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:15:41.218Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:15:41.218Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:15:41.219Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:15:41.227Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:15:41.228Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:15:41.228Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:15:41.229Z"}
{"id":"0d04eec0-db16-11e7-82d3-5b9a50f44d90","timestamp":"2017-12-07T06:15:41.229Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:16:46.165Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:16:46.168Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:16:46.168Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:16:46.168Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:16:46.168Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:16:46.169Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:16:46.169Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:16:46.169Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:16:46.169Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:16:46.297Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:16:46.336Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:16:46.339Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:16:46.339Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:16:46.341Z"}
{"id":"33d43c40-db16-11e7-97c8-17793f8b914e","timestamp":"2017-12-07T06:16:46.341Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:16:46.372Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:16:46.373Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:16:46.373Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:16:46.374Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:16:46.384Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T06:16:46.385Z"}
{"message":"Cannot read property 'indexOf' of undefined","stack":"TypeError: Cannot read property 'indexOf' of undefined\n    at IncomingMessage.request.on.error (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/request-parser.js:23:44)\n    at emitNone (events.js:86:13)\n    at IncomingMessage.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)","level":"info","timestamp":"2017-12-07T06:16:46.386Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:19:26.069Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:19:26.072Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:19:26.072Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:19:26.072Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:19:26.072Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:19:26.072Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:19:26.073Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:19:26.073Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:19:26.073Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:19:26.200Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:19:26.235Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:19:26.238Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:19:26.238Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:19:26.239Z"}
{"id":"9322e2f0-db16-11e7-ab29-515c30cfba89","timestamp":"2017-12-07T06:19:26.240Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:19:26.268Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:19:26.270Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:19:26.270Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:19:26.270Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:19:26.279Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-07T06:19:26.283Z"}
{"message":"Cannot read property 'indexOf' of undefined","stack":"TypeError: Cannot read property 'indexOf' of undefined\n    at IncomingMessage.request.on.error (/Users/predragjosifovic/codefellows/sea-401d19/lab-pedja/08-09-vanilla-rest-server/lib/request-parser.js:23:44)\n    at emitNone (events.js:86:13)\n    at IncomingMessage.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)","level":"info","timestamp":"2017-12-07T06:19:26.283Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:20:00.922Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:20:00.924Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:20:00.924Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:20:00.925Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:20:00.925Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:20:00.925Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:20:00.925Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:20:00.925Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:20:00.925Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:20:01.029Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:20:01.066Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:20:01.070Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:20:01.070Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:20:01.071Z"}
{"id":"a7e5d3f0-db16-11e7-9965-dbc5307a6a42","timestamp":"2017-12-07T06:20:01.071Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:20:01.102Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:20:01.103Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:20:01.103Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:20:01.104Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:20:01.110Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:20:01.112Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, 'That hero is NOT available, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:20:01.112Z"}
{"level":"info","message":"Responding with a 404 code due to the That hero is NOT available, hero ID not found","timestamp":"2017-12-07T06:20:01.112Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:23:57.567Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:23:57.570Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:23:57.570Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:23:57.570Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:23:57.570Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:23:57.570Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:23:57.571Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:23:57.571Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:23:57.571Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:23:57.687Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:23:57.723Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:23:57.725Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:23:57.725Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:23:57.727Z"}
{"id":"34f483e0-db17-11e7-ab8f-51ce18891393","timestamp":"2017-12-07T06:23:57.727Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:23:57.756Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:23:57.757Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:23:57.758Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:23:57.758Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:23:57.769Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:23:57.770Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:23:57.770Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:23:57.771Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:27:26.867Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:27:26.870Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:27:26.870Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:27:26.870Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:27:26.870Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:27:26.870Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:27:26.871Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:27:26.871Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:27:26.871Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:27:26.993Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:27:27.027Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:27:27.030Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:27:27.030Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:27:27.031Z"}
{"id":"b1b5ec70-db17-11e7-b063-7bc5d285a51d","timestamp":"2017-12-07T06:27:27.032Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:27:27.065Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:27:27.066Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:27:27.066Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:27:27.067Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:27:27.076Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:27:27.078Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:27:27.078Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:27:27.078Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:29:38.162Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:29:38.165Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.url.query.id) {   // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query');\n    return;\n  }\n  let heroName;\n  // let heroIndex;\n  heroes.forEach((hero) => {\n    if(request.url.query.id === hero['id']) {\n      heroName = hero;\n      return;\n    }\n  });\n  let heroIndex = heroes.indexOf(heroName);\n  // edge case lack of resources\n  if(!heroName) {\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found');\n    return;\n  } else {\n    console.log(`inside DELETE with ${heroName}`);\n    heroes.splice(heroIndex, 1);\n    console.log(`This is my new array of heroes: ${heroes}`);\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:29:38.166Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:29:38.181Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:29:55.234Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:29:55.240Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:29:55.240Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:29:55.241Z"}
{"id":"0a0cf990-db18-11e7-84da-f5fb8010a293","timestamp":"2017-12-07T06:29:55.241Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:30:05.058Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:05.061Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:05.061Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:30:05.061Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:05.061Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:30:05.062Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:30:05.062Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:05.062Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:30:05.062Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:30:10.217Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:30:10.219Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:10.219Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:30:10.219Z"}
{"id":"12fa6fb0-db18-11e7-84da-f5fb8010a293","timestamp":"2017-12-07T06:30:10.219Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:30:10.249Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:30:10.250Z"}
{"level":"info","message":"(request, response) => {\n  if(!request.body){\n    sendStatus(response, 400, 'body of hero not found');\n    return;\n  }\n  if(!request.body.name){\n    sendStatus(response, 400, 'hero\\'s name not found');\n    return;\n  }\n  if(!request.body.superPower){\n    sendStatus(response, 400, 'hero\\'s superPower not found');\n    return;\n  }\n\n  let hero = new Hero(request.body.name, request.body.superPower);\n  heroes.push(hero);\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:10.250Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:30:10.250Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:30:10.282Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:30:10.284Z"}
{"level":"info","message":"(request, response) => {\n  if(request.url.query.id) {\n    let heroName;\n    heroes.forEach((hero) => {\n      if(request.url.query.id === hero['id']) {\n        heroName = hero;\n        return;\n      }\n    });\n\n    if(!heroName) {\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__');\n      return;\n    }\n    sendJSON(response, 200, heroName);\n  } else {\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:30:10.284Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:30:10.284Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T06:30:10.287Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:30:29.253Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:29.256Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:29.256Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:30:29.256Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:29.256Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:30:29.256Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:30:29.257Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:29.257Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:30:29.257Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-07T06:30:34.437Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:30:54.963Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:54.966Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:54.966Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:30:54.966Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:54.967Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:30:54.967Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:30:54.967Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:30:54.967Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:30:54.967Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:30:55.087Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:30:55.127Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:30:55.130Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:55.130Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:30:55.131Z"}
{"id":"2dbf4fa0-db18-11e7-b383-d1a8ce843fef","timestamp":"2017-12-07T06:30:55.131Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:30:55.161Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:30:55.163Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:30:55.163Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:30:55.163Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:30:55.170Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:30:55.172Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:30:55.172Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:30:55.173Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:32:44.500Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:32:44.503Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:32:44.503Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:32:44.503Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:32:44.503Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:32:44.503Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:32:44.504Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:32:44.504Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:32:44.504Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:32:44.623Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:44.664Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:44.667Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:32:44.667Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:32:44.669Z"}
{"id":"6f097bc0-db18-11e7-b502-5d8e0049644d","timestamp":"2017-12-07T06:32:44.669Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:44.699Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:44.700Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:32:44.700Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:32:44.700Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:44.707Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:44.709Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:32:44.709Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:32:44.710Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:32:58.142Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:32:58.144Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:32:58.144Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:32:58.144Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:32:58.144Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:32:58.144Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:32:58.145Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:32:58.145Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:32:58.145Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:32:58.254Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:58.289Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:58.292Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:32:58.292Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:32:58.293Z"}
{"id":"77285740-db18-11e7-a2b7-4f02f2ada6a0","timestamp":"2017-12-07T06:32:58.293Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:58.321Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:58.322Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:32:58.323Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:32:58.323Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:58.329Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:58.331Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:32:58.331Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:32:58.331Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:32:58.337Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:32:58.337Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:32:58.337Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:32:58.337Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:33:27.574Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:33:27.576Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:33:27.576Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:33:27.576Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:33:27.576Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:33:27.576Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:33:27.577Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:33:27.577Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:33:27.577Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:33:27.683Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:33:27.720Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:33:27.723Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:33:27.723Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:33:27.724Z"}
{"id":"88b34ec0-db18-11e7-846d-a1c1a0b5bbed","timestamp":"2017-12-07T06:33:27.724Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:33:27.753Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:33:27.755Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:33:27.755Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:33:27.756Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:33:27.762Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:33:27.764Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:33:27.764Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:33:27.764Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:39:42.971Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:39:42.974Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:39:42.974Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:39:42.975Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:39:42.975Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:39:42.975Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:39:42.975Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:39:42.975Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:39:42.975Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:39:43.096Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:39:43.131Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:39:43.134Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:39:43.134Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:39:43.135Z"}
{"id":"687653e0-db19-11e7-95d5-f7988875779a","timestamp":"2017-12-07T06:39:43.135Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:39:43.164Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:39:43.168Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:39:43.168Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:39:43.168Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:39:43.176Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:39:43.177Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:39:43.177Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:39:43.177Z"}
{"id":"687ce390-db19-11e7-95d5-f7988875779a","timestamp":"2017-12-07T06:39:43.177Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:39:43.183Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:39:43.184Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:39:43.184Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:39:43.185Z"}
{"id":"687ce390-db19-11e7-95d5-f7988875779a","timestamp":"2017-12-07T06:39:43.185Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-07T06:40:12.650Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:40:12.652Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:40:12.653Z"}
{"level":"info","message":"Adding a GET url and callback","timestamp":"2017-12-07T06:40:12.653Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:40:12.653Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:40:12.653Z"}
{"level":"info","message":"Adding a DELETE url and callback","timestamp":"2017-12-07T06:40:12.653Z"}
{"level":"info","message":"/api/heroes","timestamp":"2017-12-07T06:40:12.654Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[5]++;cov_ncv9ygct9.s[41]++;\n  if (!request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[6][0]++;cov_ncv9ygct9.s[42]++; // edge case incomplete ID\n    sendStatus(response, 400, 'lack of ID in query'); /* istanbul ignore next */cov_ncv9ygct9.s[43]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[6][1]++;}\n  let heroName;\n  // let heroIndex;\n  /* istanbul ignore next */cov_ncv9ygct9.s[44]++;heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[6]++;cov_ncv9ygct9.s[45]++;\n    if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[7][0]++;cov_ncv9ygct9.s[46]++;\n      heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[47]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[7][1]++;}\n  });\n  let heroIndex = /* istanbul ignore next */(cov_ncv9ygct9.s[48]++, heroes.indexOf(heroName));\n  // edge case lack of resources\n  /* istanbul ignore next */cov_ncv9ygct9.s[49]++;if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[8][0]++;cov_ncv9ygct9.s[50]++;\n    sendStatus(response, 404, 'This hero doesn\\'t exist, hero ID not found'); /* istanbul ignore next */cov_ncv9ygct9.s[51]++;\n    return;\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[8][1]++;cov_ncv9ygct9.s[52]++;\n    console.log(`inside DELETE with ${heroName}`); /* istanbul ignore next */cov_ncv9ygct9.s[53]++;\n    heroes.splice(heroIndex, 1); /* istanbul ignore next */cov_ncv9ygct9.s[54]++;\n    console.log(`This is my new array of heroes: ${heroes}`); /* istanbul ignore next */cov_ncv9ygct9.s[55]++;\n    sendStatus(response, 204, 'SUCCESSFULLY__DELETING__A__HERO'); //succesful DELETION no body sent\n  }\n}","timestamp":"2017-12-07T06:40:12.654Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-07T06:40:12.778Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:40:12.811Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:40:12.814Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:40:12.814Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:40:12.816Z"}
{"id":"7a2749f0-db19-11e7-8c6c-7df672ad595c","timestamp":"2017-12-07T06:40:12.816Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:40:12.846Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:40:12.848Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:40:12.848Z"}
{"level":"info","message":"Responding with a 400 code due to the hero's superPower not found","timestamp":"2017-12-07T06:40:12.848Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:40:12.855Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:40:12.856Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[2]++;cov_ncv9ygct9.s[17]++;\n  if (!request.body) {/* istanbul ignore next */cov_ncv9ygct9.b[0][0]++;cov_ncv9ygct9.s[18]++;\n    sendStatus(response, 400, 'body of hero not found'); /* istanbul ignore next */cov_ncv9ygct9.s[19]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[0][1]++;}cov_ncv9ygct9.s[20]++;\n  if (!request.body.name) {/* istanbul ignore next */cov_ncv9ygct9.b[1][0]++;cov_ncv9ygct9.s[21]++;\n    sendStatus(response, 400, 'hero\\'s name not found'); /* istanbul ignore next */cov_ncv9ygct9.s[22]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[1][1]++;}cov_ncv9ygct9.s[23]++;\n  if (!request.body.superPower) {/* istanbul ignore next */cov_ncv9ygct9.b[2][0]++;cov_ncv9ygct9.s[24]++;\n    sendStatus(response, 400, 'hero\\'s superPower not found'); /* istanbul ignore next */cov_ncv9ygct9.s[25]++;\n    return;\n  } else /* istanbul ignore next */{cov_ncv9ygct9.b[2][1]++;}\n\n  let hero = /* istanbul ignore next */(cov_ncv9ygct9.s[26]++, new Hero(request.body.name, request.body.superPower)); /* istanbul ignore next */cov_ncv9ygct9.s[27]++;\n  heroes.push(hero); /* istanbul ignore next */cov_ncv9ygct9.s[28]++;\n  sendJSON(response, 200, hero);\n}","timestamp":"2017-12-07T06:40:12.856Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:40:12.856Z"}
{"id":"7a2d8b80-db19-11e7-8c6c-7df672ad595c","timestamp":"2017-12-07T06:40:12.857Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:40:12.862Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:40:12.878Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:40:12.879Z"}
{"level":"info","message":"Responding with a 200 code and following data","timestamp":"2017-12-07T06:40:12.879Z"}
{"id":"7a2d8b80-db19-11e7-8c6c-7df672ad595c","timestamp":"2017-12-07T06:40:12.879Z","name":"Kain","superPower":"Immortality","level":"info","message":""}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-07T06:40:12.886Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-07T06:40:12.887Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_ncv9ygct9.f[3]++;cov_ncv9ygct9.s[30]++;\n  if (request.url.query.id) {/* istanbul ignore next */cov_ncv9ygct9.b[3][0]++;\n    let heroName; /* istanbul ignore next */cov_ncv9ygct9.s[31]++;\n    heroes.forEach(hero => {/* istanbul ignore next */cov_ncv9ygct9.f[4]++;cov_ncv9ygct9.s[32]++;\n      if (request.url.query.id === hero['id']) {/* istanbul ignore next */cov_ncv9ygct9.b[4][0]++;cov_ncv9ygct9.s[33]++;\n        heroName = hero; /* istanbul ignore next */cov_ncv9ygct9.s[34]++;\n        return;\n      } else /* istanbul ignore next */{cov_ncv9ygct9.b[4][1]++;}\n    }); /* istanbul ignore next */cov_ncv9ygct9.s[35]++;\n\n    if (!heroName) {/* istanbul ignore next */cov_ncv9ygct9.b[5][0]++;cov_ncv9ygct9.s[36]++;\n      sendStatus(response, 404, '__HERO_ID_NOT_FOUND__'); /* istanbul ignore next */cov_ncv9ygct9.s[37]++;\n      return;\n    } else /* istanbul ignore next */{cov_ncv9ygct9.b[5][1]++;}cov_ncv9ygct9.s[38]++;\n    sendJSON(response, 200, heroName);\n  } else {/* istanbul ignore next */cov_ncv9ygct9.b[3][1]++;cov_ncv9ygct9.s[39]++;\n    sendJSON(response, 200, heroes);\n  }\n}","timestamp":"2017-12-07T06:40:12.888Z"}
{"level":"info","message":"Responding with a 404 code due to the __HERO_ID_NOT_FOUND__","timestamp":"2017-12-07T06:40:12.888Z"}
